{"/home/travis/build/npmtest/node-npmtest-article/test.js":"/* istanbul instrument in package npmtest_article */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-article/lib.npmtest_article.js":"/* istanbul instrument in package npmtest_article */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_article = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_article = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-article/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-article && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_article */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_article\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_article.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_article.rollup.js'] =\n            local.assetsDict['/assets.npmtest_article.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_article.__dirname + '/lib.npmtest_article.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-article/node_modules/article/lib/article.js":"\nvar util = require('util');\nvar TreeBuilder = require('./treebuilder.js');\n\nvar Fase1Title = require('./fase-1/title.js');\nvar Fase1Text = require('./fase-1/text.js');\nvar Fase1Image = require('./fase-1/image.js');\n\nvar Fase2 = require('./fase-2/all.js');\n\nfunction Article(source, callback) {\n  if (!(this instanceof Article)) return new Article(source, callback);\n  TreeBuilder.call(this);\n\n  this._source = source;\n  this._callback = callback;\n\n  // Create fase-1 algoritme objects\n  this._fase1title = new Fase1Title(this);\n  this._fase1text = new Fase1Text(this);\n  this._fase1image = new Fase1Image(this);\n\n  // Create fase-2 algoritme objects\n  this._fase2 = new Fase2(this);\n}\nmodule.exports = Article;\nutil.inherits(Article, TreeBuilder);\n\nArticle.prototype._element = function (node) {\n  this._fase1title.element(node);\n  this._fase1text.element(node);\n  this._fase1image.element(node);\n};\n\nArticle.prototype._end = function () {\n  try {\n    // Stream ended, perform the last calculations\n    this._fase1title.end();\n    this._fase1text.end();\n    this._fase1image.end();\n\n    // Make the fase-2 algortime fetch title, text and images\n    this._fase2.update();\n\n    // Use the title, text and image algortimes to get the final\n    // best title, image values and text container\n    this._fase2.combine();\n\n    // Remove text noice, this algortimes goes beyond just selecting a text\n    // container\n    this._fase2.reduce();\n\n    // Done calculating send the final result\n    this._callback(null, this._fase2.result());\n  } catch (err) {\n    // Sync error occurred execute callback with error\n    this._callback(err, null);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-article/node_modules/article/lib/treebuilder.js":"\nvar util = require('util');\nvar stream = require('stream');\nvar Parser = require('htmlparser2').Parser;\n\nvar domHelpers = require('./helpers-dom.js');\nvar nodes = require('./nodes.js');\n\nvar NONE_SPACE_CHAR = /\\S/;\n\nfunction TreeBuilder() {\n  stream.Writable.call(this);\n  var self = this;\n\n  // Create a root element that all other nodes will be assigned to\n  this._tree = new nodes.RootNode();\n\n  // Temorarry current container variable\n  var lastnode = this._tree;\n\n  this._parser = new Parser({\n    onopentag: function (name, attr) {\n      var node = new nodes.ElementNode(lastnode.element(), name, attr);\n\n      // Append node\n      lastnode = lastnode.append(node);\n    },\n\n    ontext: function (text) {\n      // In theory this can be destructive\n      //   e.q \"Hallo<span> </span>World\" would become HalloWorld\n      // But it seams very unlikely, so until an issue appear this is not going\n      // to change.\n      if (NONE_SPACE_CHAR.test(text) === true) {\n        var node = new nodes.TextNode(lastnode.element(), domHelpers.normalizeString(text));\n\n        // Append node\n        lastnode = lastnode.append(node);\n      }\n    },\n\n    onclosetag: function (tagname) {\n      var node = lastnode.element();\n      lastnode = lastnode.close();\n\n      // Element can not get more children call handler\n      self._element(node);\n    },\n\n    onend: function () {\n      self._tree.close();\n      self._end();\n    }\n  }, {\n    lowerCaseTags: true,\n\n    // This is quite expensive and is done within the attribute matcher\n    lowerCaseAttributeNames: false,\n\n    xmlMode: false\n  });\n\n  this.once('finish', function () {\n    this._parser.end();\n  });\n}\nmodule.exports = TreeBuilder;\nutil.inherits(TreeBuilder, stream.Writable);\n\nTreeBuilder.prototype._write = function (chunk, encoding, done) {\n  this._parser.write(chunk);\n  done(null);\n};\n\nTreeBuilder.prototype._element = function (node) {\n  throw new Error('element not implemented');\n};\n\nTreeBuilder.prototype._end = function () {\n  throw new Error('end not implemented');\n};\n","/home/travis/build/npmtest/node-npmtest-article/node_modules/article/lib/helpers-dom.js":"\nvar util = require('util');\nvar entities = require('entities');\n\nvar WHITE_SPACE = /\\s+/g;\n\nvar BLOCK_ELEMENTS = exports.BLOCK_ELEMENTS = {\n\taddress: true, article: true, aside: true,\n\tblockqoute: true, canvas: true, dd: true,\n  div: true, dl: true, fieldset: true,\n  figcaption: true, figure: true, footer: true,\n  form: true, h1: true, h2: true, h3: true,\n  h4: true, h5: true, h6: true, header: true,\n  hgroup: true, hr: true, img: true, object: true,\n  ol: true, output: true, p: true, pre: true,\n  section: true, table: true, tfoot: true,\n  ul: true, li: true, tr: true\n};\n\nvar NO_TEXT_ELEMENTS = exports.NO_TEXT_ELEMENTS = {\n\tscript: true, noscript: true, style: true,\n  iframe: true, object: true, embed: true,\n  video: true, audio: true\n};\n\nvar IGNORE_TEXT_ELEMENT = exports.IGNORE_TEXT_ELEMENT = {\n\taside: true, caption: true, menu: true,\n\tdetails: true, fieldset: true, button: true,\n\tlabel: true, input: true, textarea: true\n};\n\nvar HEADERS = exports.HEADERS = {\n\th1: true, h2: true, h3: true,\n\th4: true, h5: true, h6: true\n};\n\nvar INLINE_TEXT_TAGS = exports.INLINE_TEXT_TAGS = {\n\tstrong: true, span: true, em: true,\n\tb: true, i: true, u: true, del: true,\n\tins: true, a: true, time: true, sub: true,\n\tsup: true, big: true, small: true, tt: true,\n\tstrike: true\n};\n\nvar INLINE_STYLE_TAGS = exports.INLINE_STYLE_TAGS = {\n\th1: true, h2: true, h3: true,\n\th4: true, h5: true, h6: true,\n\tstrong: true, span: true, em: true,\n\tb: true, i: true, u: true, del: true,\n\tins: true, a: true, time: true, sub: true,\n\tsup: true, big: true, small: true, tt: true,\n\tstrike: true\n};\n\n// Map the entities decodeHTML5 method\nexports.decodeEntities = entities.decodeHTML5;\n\n// Builds and attribute matching function, complexity is for uncomfirmed\n// performace sake\nfunction buildAttributeMatcher(match) {\n  var keys = Object.keys(match);\n  var jskey, i, l;\n\n  var transform = '';\n  var bool = '';\n\n  transform = 'transform = {\\n';\n  for (i = 0, l = keys.length; i < l; i++) {\n    jskey = JSON.stringify(keys[i]);\n\n    transform += '  ' + jskey + ': attr.hasOwnProperty(' + jskey + ') ? attr[' + jskey + '].toLowerCase() : false';\n    if (i !== l - 1) transform += ',';\n    transform += '\\n';\n  }\n  transform += '};\\n';\n\n  bool = 'return !!(';\n  for (i = 0, l = keys.length; i < l; i++) {\n    jskey = JSON.stringify(keys[i]);\n\n    if (i > 0) bool += '    ||    ';\n    bool += ' ( transform[' + jskey + ']';\n\n    if (Array.isArray(match[keys[i]])) {\n      bool += ' && ( ';\n\n      for (var j = 0, s = match[keys[i]].length; j < s; j++) {\n        if (j > 0) bool += ' || ';\n\n        if (typeof match[keys[i]][j] === 'string') {\n          bool += 'transform[' + jskey + '] === \\'' + match[keys[i]][j].toLowerCase() + '\\'';\n        } else if (util.isRegExp(match[keys[i]][j])) {\n          bool += 'match[' + jskey + '][' + j + '].test(transform[' + jskey + '])';\n        }\n      }\n\n      bool += ' )';\n    }\n\n    bool += ' ) \\n';\n  }\n\n  bool += '         );';\n\n  var anonymous = new Function('attr', 'match', transform + '\\n' + bool);\n  return function (attr) {\n    return anonymous(attr, match);\n  };\n}\nexports.buildAttributeMatcher = buildAttributeMatcher;\n\n// Handle the HTML entities and replace all collections of whitespace with\n// just a single space\nfunction normalizeString(text) {\n  return entities.decodeHTML5(text).replace(WHITE_SPACE, ' ');\n}\nexports.normalizeString = normalizeString;\n\n// Checks if container `a` is a container of `b`\nfunction containerOf(a, b) {\n  while (b = b.parent) {\n    if (a === b) return true;\n  }\n  return false;\n}\nexports.containerOf = containerOf;\n\n// Find the common parent of a and b\nfunction commonParent(a, b) {\n  if (a === b) {\n    return a;\n  } else if (containerOf(a, b)) {\n    return a;\n  } else if (containerOf(b, a)) {\n    return b;\n  } else {\n    // This will happen at some point, since the root is a container of\n    // everything\n    while (b = b.parent) {\n      if (containerOf(b, a)) return b;\n    }\n  }\n}\nexports.commonParent = commonParent;\n\n// Parse style attribute intro object\nfunction styleParser(style) {\n  style = style || '';\n\n  var tokens = style.trim().split(/\\s*(?:;|:)\\s*/);\n  var output = {};\n  for (var i = 1, l = tokens.length; i < l; i += 2) {\n    output[tokens[i - 1]] = tokens[i];\n  }\n  return output;\n}\nexports.styleParser = styleParser;\n\n// Calculate the tree distance between a and b\nfunction treeDistance(a, b) {\n  if (a === b) return 0;\n  var parent = commonParent(a, b);\n\n  var aParent = a;\n  var aCount = 0;\n\n  var bParent = b;\n  var bCount = 0;\n\n  if (parent !== a) {\n    while (parent !== aParent.parent) {\n      aCount += 1;\n      aParent = aParent.parent;\n    }\n  } else {\n    bCount += 1;\n  }\n\n  if (parent !== b) {\n    while (parent !== bParent.parent) {\n      bCount += 1;\n      bParent = bParent.parent;\n    }\n  } else {\n    aCount += 1;\n  }\n\n  var abCount = 0;\n  if (parent !== a && parent !== b) {\n    abCount = Math.abs(\n      parent.children.indexOf(aParent) - parent.children.indexOf(bParent)\n    );\n  }\n\n  return aCount + bCount + abCount;\n}\nexports.treeDistance = treeDistance;\n\nfunction lastElementChild(node) {\n  var i = node.children.length;\n  while (i--) {\n    if (node.children[i].type === 'element') return node.children[i];\n  }\n  return null;\n}\nfunction positionRange(node) {\n  var curr, prev = node;\n  while (curr = lastElementChild(prev)) {\n    prev = curr;\n  }\n\n  return [node.identifyer, prev.identifyer];\n}\nexports.positionRange = positionRange;\n","/home/travis/build/npmtest/node-npmtest-article/node_modules/article/lib/nodes.js":"\nvar util = require('util');\nvar domHelpers = require('./helpers-dom.js');\n\nvar WHITE_SPACE = /\\s+/g;\nvar NEWLINE_NORMALIZE = /([ ]*)\\n([ ]*)/g;\nvar DOUBLE_NEWLINE_NORMALIZE = /([\\n]*)\\n\\n([\\n]*)/g;\n\n//\n// Simple DOM:\n// > like object structure, this is what they have in common\n//  - `.type` is a string (root, text, element)\n//  - `.parent` refer to the nodes parrent\n//  - `.identifyer` is a simply id used as an object property name elsewhere\n//  - `.children` is an array of the elements children\n//  - `.append` adds a node to this node\n//  - `.element` return the actual element\n//\n\n//\n// Node\n//  General abstaction between all node types\n//  The rule is that this should contain the most obviouse implementation\n//\nfunction Node(type, parent) {\n  this.type = type;\n  this.parent = parent;\n  this.root = parent ? parent.root : this;\n  this.identifyer = parent ? (++parent.root._counter) : 0;\n\n  // The specific constructor will set another value if necessary\n  this._textLength = 0;\n\n  this.tags = 0;\n  this.density = -1;\n\n  this.children = [];\n\n  this._text = '';\n  this._textCompiled = false;\n  this._noneStyleText = '';\n  this._noneStyleTextCompiled = false;\n\n  this.blocky = false;\n  this.blockyChildren = false;\n\n  this.inTree = true;\n}\n\n// Calculate the internal subStringLength and subTags properties\nNode.prototype._updateCounters = function () {\n  if (domHelpers.NO_TEXT_ELEMENTS.hasOwnProperty(this.tagname)) return;\n\n  for (var i = 0, l = this.children.length; i < l; i++) {\n    this._textLength += this.children[i]._textLength;\n    this.tags += this.children[i].tags;\n  }\n};\n\n// Calculate the density\nNode.prototype._updateDensity = function () {\n  this.density = (this.tags === 0) ?\n    this._textLength : this._textLength / this.tags;\n};\n\nNode.prototype.getText = function () {\n  if (this._textCompiled === true) return this._text;\n\n  for (var i = 0, l = this.children.length; i < l; i++) {\n    var subnode = this.children[i];\n\n    if (subnode.type === 'text') {\n      this._text += this.children[i]._text;\n    }\n    else if (subnode.type === 'element' && subnode.tagname === 'br') {\n      this._text += '\\n';\n    }\n    else if (subnode.type === 'element' &&\n            domHelpers.BLOCK_ELEMENTS.hasOwnProperty(subnode.tagname) === true) {\n      this._text += '\\n\\n' + subnode.getText() + '\\n\\n';\n    }\n    else if (domHelpers.NO_TEXT_ELEMENTS.hasOwnProperty(subnode.tagname) === false) {\n      this._text += subnode.getText();\n    }\n  }\n\n  this._text = this._text\n    // Make sure that space don't surround newline\n    .replace(NEWLINE_NORMALIZE, '\\n')\n    // Make sure that there is no more than two newlines after each other\n    .replace(DOUBLE_NEWLINE_NORMALIZE, '\\n\\n');\n\n  this._textCompiled = true;\n\n  return this._text;\n};\n\nNode.prototype.getNoneStyledText = function () {\n  if (this._noneStyleTextCompiled === true) return this._noneStyleText;\n\n  for (var i = 0, l = this.children.length; i < l; i++) {\n    var subnode = this.children[i];\n\n    if (subnode.type === 'text') {\n      this._noneStyleText += this.children[i]._text;\n    }\n    else if (subnode.tagname === 'br') {\n      this._noneStyleText += '\\n';\n    }\n    else if (domHelpers.INLINE_STYLE_TAGS.hasOwnProperty(subnode.tagname) === true) {\n      // Skip style tags\n    }\n    else if (domHelpers.BLOCK_ELEMENTS.hasOwnProperty(subnode.tagname) === true) {\n      this._noneStyleText += '\\n\\n' + subnode.getNoneStyledText() + '\\n\\n';\n    }\n    else if (domHelpers.NO_TEXT_ELEMENTS.hasOwnProperty(subnode.tagname) === false) {\n      this._noneStyleText += subnode.getNoneStyledText();\n    }\n  }\n\n  this._noneStyleText = this._noneStyleText\n    // Make sure that space don't surround newline\n    .replace(NEWLINE_NORMALIZE, '\\n')\n    // Make sure that there is no more than two newlines after each other\n    .replace(DOUBLE_NEWLINE_NORMALIZE, '\\n\\n');\n\n  this._noneStyleTextCompiled = true;\n\n  return this._noneStyleText;\n};\n\n// Set up all the parents to recalculate the text\nNode.prototype._textChanged = function () {\n  if (this._textLength !== 0) {\n    var parent = this;\n    while (parent = parent.parent) {\n      if (parent._textCompiled === false) break;\n      parent._textCompiled = false;\n      parent._text = '';\n    }\n  }\n};\n\n// Update blocky flags\nNode.prototype._blockyChanged = function () {\n  if (this.blocky === true) {\n    var parent = this;\n    while(parent = parent.parent) {\n      parent._updateBlocky();\n      // If parent is blocky then nothing at this level has changed\n      // and so other parents also won't change.\n      if (parent.blocky === true) break;\n    }\n  }\n};\n\nNode.prototype._inTreeFlag = function (bool) {\n  this.inTree = bool;\n  if (this.type === 'element') {\n    for (var i = 0, l = this.children.length; i < l; i++) {\n      this.children[i]._inTreeFlag(bool);\n    }\n  }\n};\n\nNode.prototype.remove = function () {\n  if (this.parent) {\n    // Remove this node\n    var index = this.parent.children.indexOf(this);\n    if (index !== -1) {\n      this.parent.children.splice(index, 1);\n    }\n\n    // Update flags\n    this._textChanged();\n    this._blockyChanged();\n    this._inTreeFlag(false);\n\n    // Remove this node from the classlist\n    if (this.classes) {\n      this.root.classlist.removeNode(this);\n    }\n  }\n};\n\nNode.prototype.insert = function (node, index) {\n  // Insert node\n  node.parent = this;\n  this.children.splice(index, 0, node);\n\n  // Update flags\n  this._textChanged();\n  this._blockyChanged();\n\n  // Insert this node intro the classlist\n  if (this.classes) {\n    this.root.classlist.addNode(this);\n  }\n};\n\nNode.prototype.before = function () {\n  var index = this.parent.children.indexOf(this);\n  if (index === 0) return this.parent;\n  return this.parent.children[index - 1];\n};\n\nNode.prototype.after = function () {\n  var index = this.parent.children.indexOf(this);\n  if (index === this.parent.children.length - 1) return this.parent;\n  return this.parent.children[index + 1];\n};\n\nNode.prototype._updateBlocky = function () {\n\tthis.blocky = this._blockySelfCache;\n\tthis.blockyChildren = false;\n\n  // Check if a none blocky element contains a blocky element\n\tfor (var i = 0, l = this.children.length; i < l; i++) {\n\t\tif (this.children[i].blocky === true) {\n\t\t\tthis.blocky = true;\n\t\t\tthis.blockyChildren = true;\n\t\t\tbreak;\n\t\t}\n\t}\n};\n\n//\n// RootNode\n//   has no parent, tagname or attribute\n//\nfunction RootNode() {\n  Node.call(this, 'root', null);\n  this._blockySelfCache = true;\n  this._counter = 0;\n\n  this.classlist = new ClassList();\n}\nutil.inherits(RootNode, Node);\nexports.RootNode = RootNode;\n\nRootNode.prototype.append = function (child) {\n  this.children.push(child);\n\n  return child;\n};\n\nRootNode.prototype.close = function () {\n  this._updateCounters();\n  this._updateDensity();\n  this._updateBlocky();\n\n  return null;\n};\n\nRootNode.prototype.element = function () {\n  return this;\n};\n\nRootNode.prototype.print = function () {\n  return '!root';\n};\n\n//\n// FragmentNode\n//   has parent and children, but no tagname or attribute\n//\nfunction FragmentNode(parent) {\n  Node.call(this, 'fragment', parent);\n}\nutil.inherits(FragmentNode, Node);\nexports.FragmentNode = FragmentNode;\n\nFragmentNode.prototype.append = function (child) {\n  this.children.push(child);\n\n  return child;\n};\n\nFragmentNode.prototype.close = function () {\n  return this.parent;\n};\n\nFragmentNode.prototype.element = function () {\n  return this;\n};\n\nFragmentNode.prototype.assign = function (node) {\n  node.children = this.children;\n};\n\nFragmentNode.prototype.print = function () {\n  return '!fragment';\n};\n\n//\n// TextNode\n//   has a parent and a text containter\n//\nfunction TextNode(parent, text) {\n  Node.call(this, 'text', parent);\n\n  // A text node has no children instead it has a text container\n  this.children = null;\n  this._text = text;\n  this._noneStyleText = text;\n}\nutil.inherits(TextNode, Node);\nexports.TextNode = TextNode;\n\nTextNode.prototype.append = function (node) {\n  if (node.type === 'text') {\n    this._text += node._text;\n    return this;\n  } else {\n    // Since the text there are to follow no will not be appended to this text\n    // node close it\n    this._textClose();\n\n    // the parrent will assign a position\n    this.parent.append(node);\n    return node;\n  }\n};\n\nTextNode.prototype._textClose = function () {\n  this._text = this._text.replace(WHITE_SPACE, ' ');\n  this._textCompiled = true;\n\n  this._textLength = this._text.length;\n  this._updateDensity();\n};\n\nTextNode.prototype.close = function () {\n  this._textClose();\n\n  return this.parent.close();\n};\n\nTextNode.prototype.element = function () {\n  return this.parent;\n};\n\nTextNode.prototype.countTagname = function () {\n  return 0;\n};\n\nTextNode.prototype.print = function () {\n  var text = this._text.trim();\n  return '# ' + text.slice(0, 50).trim() + (text.length > 50 ? '...' : '');\n};\n\n//\n// ElementNode\n//   has a parent, tagname and attributes\n//\n\nfunction ElementNode(parent, tagname, attributes) {\n  Node.call(this, 'element', parent);\n\n  // Since this is an element there will minimum one tag\n  this.tags = (tagname === 'br' || tagname === 'wbr') ? 0 : 1;\n\n  // Element nodes also has a tagname and an attribute collection\n  this.tagname = tagname;\n  this.attr = attributes;\n  this.classes = attributes.hasOwnProperty('class') ?\n    attributes['class'].trim().split(WHITE_SPACE) : [];\n\n  // Add node to the classlist\n  this.root.classlist.addNode(this);\n\n  this._blockySelfCache = domHelpers.BLOCK_ELEMENTS.hasOwnProperty(tagname);\n  this._countTagnames = {};\n}\nutil.inherits(ElementNode, Node);\nexports.ElementNode = ElementNode;\n\nElementNode.prototype.append = function (child) {\n  this.children.push(child);\n\n  return child;\n};\n\nElementNode.prototype.close = function () {\n  this._updateCounters();\n  this._updateDensity();\n  this._updateBlocky();\n\n  return this.parent;\n};\n\nElementNode.prototype.element = function () {\n  return this;\n};\n\nElementNode.prototype.countTagname = function (tagname) {\n  if (this._countTagnames.hasOwnProperty(tagname)) return this._countTagnames[tagname];\n\n  var total = this.tagname === tagname ? 1 : 0;\n  for (var i = 0, l = this.children.length; i < l; i++) {\n    total += this.children[i].countTagname(tagname);\n  }\n\n  this._countTagnames[tagname] = total;\n  return total;\n};\n\nElementNode.prototype.print = function () {\n  var names = Object.keys(this.attr);\n  var str = '';\n  for (var i = 0, l = names.length; i < l; i++) {\n    var attrStr = this.attr[names[i]];\n    str += names[i] + '=\"' + attrStr.slice(0, 20) + (attrStr.length > 20 ? '...' : '') + '\" ';\n  }\n\n  return '<' + this.tagname + ' ' + str + '>';\n};\n\n//\n// Classlist collection\n//\nfunction ClassList() {\n  this.classes = [];\n  this.collections = Object.create(null);\n}\n\nClassList.prototype.get = function (name) {\n  return Object.prototype.hasOwnProperty.call(this.collections, name) ?\n    this.collections[name] : [];\n};\n\nClassList.prototype.count = function (name) {\n  return Object.prototype.hasOwnProperty.call(this.collections, name) ?\n    this.collections[name].length : 0;\n};\n\nClassList.prototype.set = function (name, node) {\n  if (Object.prototype.hasOwnProperty.call(this.collections, name)) {\n    this.collections[name].push(node);\n  } else {\n    this.collections[name] = [node];\n    this.classes.push(name);\n  }\n};\n\nClassList.prototype.remove = function (name, node) {\n  if (Object.prototype.hasOwnProperty.call(this.collections, name)) {\n    var index = this.collections[name].indexOf(node);\n    if (index !== -1) {\n      this.collections[name].splice(index, 1);\n    }\n\n    if (this.collections[name].length === 0) {\n      delete this.collections[name];\n      this.classes.splice(this.classes.indexOf(name), 1);\n    }\n  }\n};\n\nClassList.prototype.addNode = function (node) {\n  for (var i = 0, l = node.classes.length; i < l; i++) {\n    this.set(node.classes[i], node);\n  }\n};\n\nClassList.prototype.removeNode = function (node) {\n  for (var i = 0, l = node.classes.length; i < l; i++) {\n    this.remove(node.classes[i], node);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-article/node_modules/article/lib/fase-1/title.js":"\nvar mathHelpers = require('../helpers-math.js');\nvar domHelpers = require('../helpers-dom.js');\n\nvar TitleHeaderItem = require('./title-header-item.js');\nvar TitleMetaItem = require('./title-meta-item.js');\n\nfunction TitleAlgoritme() {\n  // Contains text string there have something to do with the wanted title\n  // and the object representing this meta string\n  this._metaText = [];\n  this._meta = [];\n\n  // Contains <h_> and zero elemment-children tags\n  this._headers = [];\n  this._adjustLevel = new mathHelpers.RangeObject();\n  this._adjustWordscore = new mathHelpers.RangeObject();\n}\nmodule.exports = TitleAlgoritme;\n\nvar metaHeadling = domHelpers.buildAttributeMatcher({\n  property: ['rnews:headline', 'og:title', 'twitter:title'],\n  name: ['title', 'hdl', 'hdl_p', 'twitter:title'],\n  itemprop: ['alternativeHeadline', 'headline']\n});\n\nTitleAlgoritme.prototype.element = function (node) {\n  // Grap the <title> tag, it might usually contains some valuable information.\n  if (node.tagname === 'title') {\n    this._handleMeta(node.getText());\n  }\n  // Grap the <meta> tags, there may contain some valuable information.\n  else if (node.tagname === 'meta' && metaHeadling(node.attr) && node.attr.content) {\n    this._handleMeta(domHelpers.normalizeString(node.attr.content));\n  }\n  // Grap actual headers, meaning <h_> tags\n  else if ((domHelpers.HEADERS.hasOwnProperty(node.tagname) || node.tags === 1) &&\n            node.density !== 0) {\n    this._handleHeader(node);\n  }\n};\n\nTitleAlgoritme.prototype._handleMeta = function (text) {\n  text = text.trim();\n\n  // Check if this is a new string, in case of dublication there is no need\n  // for calculating the distances again, just incease a weight counter\n  var index = this._metaText.indexOf(text);\n\n  if (index === -1) {\n    // Not found add a new string\n    this._metaText.push(text);\n\n    // Create and store meta object\n    var meta = new TitleMetaItem(text);\n    this._meta.push(meta);\n\n    // Calculate new distances\n    for (var i = 0, l = this._headers.length; i < l; i++) {\n      this._headers[i].appendDistance(meta);\n    }\n  } else {\n    // The text already exists, just incease the appear counter\n    this._meta[index].increaseAppear();\n  }\n};\n\nTitleAlgoritme.prototype._handleHeader = function (node) {\n  var header = new TitleHeaderItem(this, node);\n  if (header.ignore === false) this._headers.push(header);\n};\n\n// The end of the document is reached\nTitleAlgoritme.prototype.end = function () {\n  // Set the likelihood property on each header\n  for (var i = 0, l = this._headers.length; i < l; i++) {\n    this._headers[i].calculateLikelihood();\n  }\n\n  // Best likelihood wins, but futher down on the page is also good\n  this._headers = this._headers.sort(function (a, b) {\n    var likelihood = b.likelihood - a.likelihood;\n    if (likelihood !== 0) return likelihood;\n    return b.node.identifyer - a.node.identifyer;\n  });\n};\n\nTitleAlgoritme.prototype.result = function () {\n  return this._headers;\n};\n","/home/travis/build/npmtest/node-npmtest-article/node_modules/article/lib/helpers-math.js":"\nfunction zeroDivide(a, b) {\n  return b === 0 ? 0 : a / b;\n}\n\nfunction adjustedSum(values, adjust, appear) {\n  var divider = 0;\n  var sum = 0;\n\n  for (var i = 0, l = adjust.length; i < l; i++) {\n    // if min == max, then the likehood can not be calculated because there is\n    // nothing to relate to, so just distribute the likehood evenly by using\n    // the number 0 (meainging very likely)\n    sum += (adjust[i].max === adjust[i].min) ? appear[i] : zeroDivide(\n      appear[i] * (values[i] - adjust[i].min),\n      adjust[i].max - adjust[i].min\n    );\n\n    divider += appear[i];\n  }\n\n  // The returned value is between 1 (likely) and 0 (unlikly).\n  return sum / divider;\n}\nexports.adjustedSum = adjustedSum;\n\nfunction adjusedValue(value, adjust) {\n  // The returned value is between 1 (likely) and 0 (unlikly).\n  return adjust.min === adjust.max ? 1 : zeroDivide(value - adjust.min, adjust.max - adjust.min);\n}\nexports.adjusedValue = adjusedValue;\n\nfunction distance(values) {\n  var sum = 0;\n  for (var i = 0, l = values.length; i < l; i++) {\n    sum += Math.pow(values[i], 2);\n  }\n\n  return sum;\n}\nexports.distance = distance;\n\nfunction average(values) {\n  var sum = 0;\n  for (var i = 0, l = values.length; i < l; i++) {\n    sum += values[i];\n  }\n\n  return sum / l;\n}\nexports.average = average;\n\n//\n// Simple object used for storing and calculating a (min,max) range\n//\nfunction RangeObject() {\n  this.max = -Infinity;\n  this.min = Infinity;\n}\nexports.RangeObject = RangeObject;\n\nRangeObject.prototype.update = function (value) {\n  if (value < this.min) {\n    this.min = value;\n  }\n  if (value > this.max) {\n    this.max = value;\n  }\n};\n\nRangeObject.prototype.adjust = function (value) {\n  var a = value - this.min,\n      b = this.max - this.min;\n\n  return b === 0 ? 0 : a / b;\n};\n\nRangeObject.prototype.appearAdjust = function (value, appear) {\n  var a = appear * (value - this.min),\n      b = this.max - this.min;\n\n  return b === 0 ? appear : a / b;\n};\n\n//\n// Creates a size object\n//  if just one of width or height is known the other will be estimated\n//  using the golden ratio, assuming that it is a hoisontal picture\n//\n//  Note this also calculates the relative distance to the golden ratio,\n//   but in case the width or height was estimated (distance would be 0),\n//   a value of 0.618 is used (w = h). PS: the distance is then transformed\n//   to a fitness score.\n//\nvar GOLDEN_RATIO = 1.6180;\nvar MAYBE_BANNER_SIZE = 600*200;\nfunction ImageSize(width, height) {\n  // width and height are either numbers or null\n\twidth = (typeof width === 'string' ? parseInt(width, 10) : Math.ceil(width)) || null;\n\theight = (typeof height === 'string' ? parseInt(height, 10) : Math.ceil(height)) || null;\n\n\tif (width && height) {\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t} else if (width) {\n\t\tthis.width = width;\n\t\tthis.height = Math.ceil(width / GOLDEN_RATIO);\n\t} else if (height) {\n\t\tthis.width = Math.ceil(height * GOLDEN_RATIO);\n\t\tthis.height = height;\n\t} else {\n\t\tthis.width = null;\n\t\tthis.height = null;\n\t}\n\n\tif (width || height) {\n\t\tthis.area = this.width * this.height;\n\t} else {\n\t\tthis.area = null;\n\t}\n\n  if (this.area > MAYBE_BANNER_SIZE && width && height) {\n    this.banner = Math.min(\n      Math.abs(GOLDEN_RATIO - (width / height))/GOLDEN_RATIO,\n      Math.abs(GOLDEN_RATIO - (height / width))/GOLDEN_RATIO\n    );\n  } else {\n    this.banner = 0;\n  }\n}\nexports.ImageSize = ImageSize;\n","/home/travis/build/npmtest/node-npmtest-article/node_modules/article/lib/fase-1/title-header-item.js":"\nvar domHelpers = require('../helpers-dom.js');\n\nvar WORD_SPLIT = /\\s+/;\nvar CONTAINS_WORDS = /(\\w)(\\s+)(\\w)/;\n\nfunction TitleHeaderItem(algoritme, node) {\n  this._algoritme = algoritme;\n\n  this.node = node;\n  this._tagname = node.tagname;\n\n  this.text = node.getText().trim();\n  this.words = [];\n\n  this._level = 0;\n  this._wordscore = 0;\n  this._levenshtein = [];\n  this._worddiff = [];\n  this._fussy = [];\n\n  this.likelihood = 0;\n\n  this.ignore = this.text.length >= 200 || !CONTAINS_WORDS.test(this.text);\n  if (this.ignore === false) {\n    this.words = this.text.split(WORD_SPLIT);\n    this._calculateScores();\n\n    for (var i = 0, l = algoritme._meta.length; i < l; i++) {\n      this.appendDistance(algoritme._meta[i]);\n    }\n  }\n}\nmodule.exports = TitleHeaderItem;\n\n// Linear scale function between:\n// f(6) = 0.1\n// f(1) = 1\nfunction headerScore(x) {\n  return -0.18 * x + 1.18;\n}\n\n// This function is made by the following requirements:\n// x > 5, y = 1\n// f(x) = a*sqrt(x) + b*x^2 + c\n// f(2) = 0.2\n// f(5) = 1\n// f'(5) = 0\nfunction wordcountScore(x) {\n  if (x > 5) return 1;\n  else return Math.min(1, 2.27 * Math.sqrt(x) - 0.0507 * Math.pow(x, 2) - 2.808);\n}\n\n// Calculate the none meta comparison scores\nTitleHeaderItem.prototype._calculateScores = function () {\n  var algoritme = this._algoritme;\n\n  // set level property\n  this._level = 0.5;\n  if (domHelpers.HEADERS.hasOwnProperty(this._tagname)) {\n    this._level = headerScore(Number(this._tagname.slice(1)));\n  }\n\n  // set wordscore property\n  this._wordscore = wordcountScore(this.words.length);\n\n  // update range objects\n  algoritme._adjustLevel.update(this._level);\n  algoritme._adjustWordscore.update(this._wordscore);\n};\n\n// Calculate meta comparison scores\nTitleHeaderItem.prototype.appendDistance = function (meta) {\n  this._levenshtein.push(meta.calculateLevenshtein(this));\n  this._worddiff.push(meta.calculateWorddiff(this));\n  this._fussy.push(meta.calculateFussy(this));\n};\n\n  // Set the .likelihood property\nTitleHeaderItem.prototype.calculateLikelihood = function () {\n  var algoritme = this._algoritme;\n  var meta = algoritme._meta;\n\n  var levenshteinTotal = 0,\n      worddiffTotal = 0,\n      fussyTotal = 0;\n\n  var divider = 0;\n  for (var i = 0, l = meta.length; i < l; i++) {\n    levenshteinTotal += meta[i]._levenshtein.appearAdjust(this._levenshtein[i], meta[i].appear);\n    worddiffTotal += meta[i]._worddiff.appearAdjust(this._worddiff[i], meta[i].appear);\n    fussyTotal += meta[i]._fussy.appearAdjust(this._fussy[i], meta[i].appear);\n\n    divider += meta[i].appear;\n  }\n\n  // The adjust method expect high values to be (likely) but in this\n  // case lower values are actaully the best, so 1 - likelihood transforms\n  // it intro 1 (likely), 0 (unlikly)\n  var levenshtein = 1 - (levenshteinTotal / divider),\n      worddiff = 1 - (worddiffTotal / divider),\n      fussy = 1 - (fussyTotal / divider),\n\n  // These where created using mathematical functions there followed the\n  // 1 ~ likely rule.\n      wordscore = algoritme._adjustWordscore.adjust(this._wordscore),\n      level = algoritme._adjustLevel.adjust(this._level);\n\n  // Then calculate the avg. likelihood\n  this.likelihood = (levenshtein + worddiff + level + fussy + wordscore) / 5;\n};\n","/home/travis/build/npmtest/node-npmtest-article/node_modules/article/lib/fase-1/title-meta-item.js":"\nvar fusspos = require('fusspos');\nvar worddiff = require('worddiff');\nvar editdistance = require('editdistance');\n\nvar mathHelpers = require('../helpers-math.js');\n\nvar WORD_SPLIT = /\\s+/;\n\nfunction TitleMetaItem(text) {\n  this.appear = 1;\n\n  this.text = text;\n  this.words = text.split(WORD_SPLIT);\n  this._editdistance = editdistance(text);\n\n  this._levenshtein = new mathHelpers.RangeObject();\n  this._worddiff = new mathHelpers.RangeObject();\n  this._fussy = new mathHelpers.RangeObject();\n}\nmodule.exports = TitleMetaItem;\n\nTitleMetaItem.prototype.increaseAppear = function () {\n  this.appear += 1;\n};\n\nTitleMetaItem.prototype.calculateLevenshtein = function (item) {\n  var distance = this._editdistance.distance(item.text);\n  this._levenshtein.update(distance);\n  return distance;\n};\n\nTitleMetaItem.prototype.calculateWorddiff = function (item) {\n  var distance = worddiff(item.words, this.words);\n  this._worddiff.update(distance);\n  return distance;\n};\n\nTitleMetaItem.prototype.calculateFussy = function (item) {\n  var distance = fusspos(item.words, this.words).fussy;\n  this._fussy.update(distance);\n  return distance;\n};\n","/home/travis/build/npmtest/node-npmtest-article/node_modules/article/lib/fase-1/text.js":"\nvar domHelpers = require('../helpers-dom.js');\nvar mathHelpers = require('../helpers-math.js');\n\nvar TextContainerItem = require('./text-container-item.js');\nvar TextMetaItem = require('./text-meta-item.js');\n\nfunction TextAlgoritme() {\n  // Contains text string there have something to do with the wanted title\n  // and the amount of times it has appeared\n  this._metaText = [];\n  this._meta = [];\n\n  // Contains all body elements, when they all are collected it will be sorted\n  // by its text/tag density\n  this._elements = [];\n\n  // Temporary object used in creating the resulting container objects\n  this._containerMap = {};\n  this._containerText = Object.create(null);\n\n  // Range objects for adjusing features intro a 0..1 range\n  this._adjustContainerCount = new mathHelpers.RangeObject();\n  this._adjustContainerDensity = new mathHelpers.RangeObject();\n  this._adjustShortline = new mathHelpers.RangeObject();\n  this._adjustLinebreak = new mathHelpers.RangeObject();\n  this._adjustClasscount = new mathHelpers.RangeObject();\n  this._adjustStyleRatio = new mathHelpers.RangeObject();\n  this._adjustSentensesCount = new mathHelpers.RangeObject();\n  this._adjustParagraphCount = new mathHelpers.RangeObject();\n\n  // Contains some good sugestions for text containers\n  this._containers = [];\n}\nmodule.exports = TextAlgoritme;\n\nvar metaDescription = domHelpers.buildAttributeMatcher({\n  property: ['rnews:description', 'og:description', 'twitter:description'],\n  name: ['description', 'lp', 'twitter:description'],\n  itemprop: ['description']\n});\n\nTextAlgoritme.prototype.element = function (node) {\n  // Grap the <meta> tags, there may contain some valuable information.\n  if (node.tagname === 'meta' && metaDescription(node.attr) && node.attr.content) {\n    this._handleMeta(domHelpers.normalizeString(node.attr.content));\n  }\n  // Grap actual text containing elements\n  // NOTE: out if 258 html files the lowerst density in the 40 most dense\n  // elements was 12, so for optimization don't add elements with a density\n  // lower than 10. Something lower than 10 would mostlikely also be useless.\n  else if (node.density > 10) {\n    this._handleText(node);\n  }\n};\n\nTextAlgoritme.prototype._handleMeta = function (text) {\n  text = text.trim();\n\n  // Check if this is a new string, in case of dublication there is no need\n  // for calculating the distances again, just incease a counter\n  var index = this._metaText.indexOf(text);\n\n  if (index === -1) {\n    // Not found add a new string\n    this._metaText.push(text);\n\n    // Create and store meta object\n    this._meta.push(new TextMetaItem(text));\n\n    // TODO: use the same pattern as in title.js\n  } else {\n    // The text already exists, just incease the appear counter\n    this._meta[index].increaseAppear();\n  }\n};\n\nTextAlgoritme.prototype._handleText = function (node) {\n  this._elements.push(node);\n};\n\nTextAlgoritme.prototype._analysePair = function (elemA, elemB) {\n  // Match every elements against evey other element and find there\n  // common parent, this includes the element itself.\n  var parentNode = domHelpers.commonParent(elemA, elemB);\n\n  // The root, html and body are not valid parents, since they will always\n  // contain too much data\n  if (parentNode.type === 'root' || parentNode.tagname === 'html' || parentNode.tagname === 'body') {\n    return;\n  }\n\n  // Increase the counter if the parentNode has already been analysed\n  if (this._containerMap.hasOwnProperty(parentNode.identifyer) === true) {\n    this._containerMap[parentNode.identifyer].increaseCount();\n    return;\n  }\n\n  // The size is text crazy big, even if it is correct it will take a long\n  // time to process\n  var rawText = parentNode.getText().trim();\n  if (rawText.length > 20000) return;\n\n  // If another node contains the same text, don't create a new parent\n  // just increase its counter\n  var identifyer = this._containerText[rawText];\n  if (identifyer !== undefined) {\n    this._containerMap[identifyer].increaseCount();\n    return;\n  }\n\n  // Create the container object and maintain the keys array\n  this._containerText[rawText] = parentNode.identifyer;\n  this._containerMap[parentNode.identifyer] = new TextContainerItem(this, parentNode, rawText);\n};\n\n// The end of the document is reached\nTextAlgoritme.prototype.end = function () {\n  // Take the 40 best elements mesured by the density\n  var elements = this._elements\n    .sort(function (a, b) {\n      return b.density - a.density;\n    })\n    .slice(0, 40);\n\n  // Do a x/x table match to find the common parents\n  var l = elements.length;\n  for (var i = 0; i < l; i++) {\n    for (var j = i; j < l; j++) {\n      this._analysePair(elements[i], elements[j]);\n    }\n  }\n\n  // Calculate the likelihood for each commonParent\n  var commonParent = [];\n  var keys = Object.keys(this._containerMap);\n  for (var n = 0, t = keys.length; n < t; n++) {\n    var item = this._containerMap[ keys[n] ];\n        item.calculateLikelihood();\n    commonParent.push(item);\n  }\n\n  // Now sort the remaining commonParent containers by likelihood and then\n  // their position\n  this._containers = commonParent.sort(function (a, b) {\n    var likelihood = b.likelihood - a.likelihood;\n    if (likelihood !== 0) return likelihood;\n    return b.node.identifyer - a.node.identifyer;\n  });\n};\n\nTextAlgoritme.prototype.result = function () {\n  return this._containers;\n};\n","/home/travis/build/npmtest/node-npmtest-article/node_modules/article/lib/fase-1/text-container-item.js":"\nvar mathHelpers = require('../helpers-math.js');\n\nvar WORD_SPLIT = /\\s+/;\nvar LINE_SPLIT = /\\n+/;\nvar CONTAIN_SENTENCE = /\\.[^a-zA-Z]+(?=[A-Z]|$)/;\n\nfunction TextContainerItem(algoritme, node, text) {\n  this._algoritme = algoritme;\n\n  this.node = node;\n\n  // Diffrent text properties\n  this.text = text;\n  this.lines = text.split(LINE_SPLIT);\n  this.words = text.split(WORD_SPLIT);\n\n  // A linear appear value\n  this._count = 0;\n  this.increaseCount();\n\n  // The scores\n  this._shortline = 0;\n  this._linebreaks = 0;\n  this._classcount = 0;\n  this._styleratio = 0;\n  this._paragraphs = 0;\n  this._density = 0;\n  this._match = [];\n\n  // Calculate scores\n  this._calculateScores();\n  for (var i = 0, l = algoritme._meta.length; i < l; i++) {\n    this.appendDistance(algoritme._meta[i]);\n  }\n}\nmodule.exports = TextContainerItem;\n\nTextContainerItem.prototype.increaseCount = function () {\n  var algoritme = this._algoritme;\n\n  this._count += 1;\n  algoritme._adjustContainerCount.update(this._count);\n};\n\nTextContainerItem.prototype._calculateScores = function () {\n  this._calculateShortline();\n  this._calculateLinebreaks();\n  this._calculateClasscount();\n  this._calculateStyleratio();\n  this._calculateSentenses();\n  this._calculateParagraphs();\n  this._calculateDensity();\n};\n\n// Containers with short lines should be punished\nTextContainerItem.prototype._calculateShortline = function () {\n  var algoritme = this._algoritme;\n\n  // Count the amount of short lines (40 chars)\n  var shortlines = 0;\n  for (var a = 0, m = this.lines.length; a < m; a++) {\n    if (this.lines[a].length <= 40) shortlines += 1;\n  }\n\n  // Update property\n  this._shortlines = shortlines;\n  algoritme._adjustShortline.update(shortlines);\n};\n\n// This function is made by the following requirements:\n// x > 5, y = 1\n// f(x) = a*sqrt(x) + b*x^2 + c\n// f(0) = 0.2\n// f(5) = 1\n// f'(5) = 0\nfunction linebreakScore(x) {\n  if (x > 5) return 1;\n  else return Math.min(1, 0.477 * Math.sqrt(x) - 0.0106 * Math.pow(x, 2) + 0.2);\n}\n\n// Containers with very few lines should be punished\nTextContainerItem.prototype._calculateLinebreaks = function () {\n  var algoritme = this._algoritme;\n  var linebreaks = linebreakScore(this.lines.length);\n\n  // Update property\n  this._linebreaks = linebreaks;\n  algoritme._adjustLinebreak.update(linebreaks);\n};\n\nvar CLASS_COUNT_SCORES = [1, 0.85, 0.73, 0.63, 0.54, 0.44, 0.34, 0.26, 0.22, 0.2];\nfunction classcountScore(x) {\n  if (x <= 1) return 1;\n  else if (x >= 10) return 0.2;\n  else return CLASS_COUNT_SCORES[x - 1];\n}\n\n// Containers classes there aren't wildly used is prefered\nTextContainerItem.prototype._calculateClasscount = function () {\n  var algoritme = this._algoritme;\n  var classlist = this.node.root.classlist;\n\n  // Calculcate a classcount score\n  var max = 0, count = 0;\n  for (var i = 0, l = this.node.classes.length; i < l; i++) {\n    count = classlist.count(this.node.classes[i]);\n    if (max < count) max = count;\n  }\n  var classcount = classcountScore(max);\n\n  // Update property\n  this._classcount = classcount;\n  algoritme._adjustClasscount.update(classcount);\n};\n\n// Compare the amount of styled text with the total text length\n// E.q. this will prevent long lists of links to be registred as a\n// text container\nTextContainerItem.prototype._calculateStyleratio = function () {\n  var algoritme = this._algoritme;\n  var noneStyledText = this.node.getNoneStyledText().trim();\n  var styleratio = 1 - (this.text.length - noneStyledText.length) / this.text.length;\n\n  // Update property\n  this._styleratio = styleratio;\n  algoritme._adjustStyleRatio.update(styleratio);\n};\n\n// Count the content of the 2 bigest groupes of paragraphs\nTextContainerItem.prototype._calculateSentenses = function () {\n  var algoritme = this._algoritme;\n\n  // Count the amount of sentenses containing paragraphs in a row.\n  var collection = [0];\n  var paragraphSize = 0;\n  for (var i = 0, l = this.lines.length; i < l; i++) {\n    if (CONTAIN_SENTENCE.test(this.lines[i]) === false) {\n      // found bad paragraph push and reset counter\n      if (paragraphSize !== 0) {\n        collection.push(paragraphSize);\n        paragraphSize = 0;\n      }\n    } else {\n      paragraphSize += this.lines[i].length;\n    }\n  }\n  if (paragraphSize !== 0) collection.push(paragraphSize);\n\n  // Find the two largest paragraph collections\n  var maxes = [0, 0];\n  for (var a = 0, r = collection.length; a < r; a++) {\n    if (collection[a] >= maxes[1]) {\n      maxes[0] = maxes[1];\n      maxes[1] = collection[a];\n    }\n  }\n\n  // Calculate the total text length\n  var sentenses = maxes[0] + maxes[1];\n\n  // Update property\n  this._sentenses = sentenses;\n  algoritme._adjustSentensesCount.update(sentenses);\n};\n\n// Simply count the amount of <p> tags\nTextContainerItem.prototype._calculateParagraphs = function () {\n  var algoritme = this._algoritme;\n  var paragraphs = this.node.countTagname('p');\n\n  // Update property\n  this._paragraphs = paragraphs;\n  algoritme._adjustParagraphCount.update(paragraphs);\n};\n\n// Use the parent density as a feature\nTextContainerItem.prototype._calculateDensity = function () {\n  var algoritme = this._algoritme;\n  var density = this.node.density;\n\n  // Update property\n  this._density = density;\n  algoritme._adjustContainerDensity.update(density);\n};\n\n// Calculate meta comparison scores\nTextContainerItem.prototype.appendDistance = function (meta) {\n  this._match.push(meta.calculateMatch(this));\n};\n\n// This function is made by the following requirements:\n// : x < 0.01 , y = 0.5\n// : x > 0.1 , y = 1\n// : f(x), otherwise\n// The f(x) polynomium is made so it follows:\n// : f(0.01) = 0.5\n// : f'(0.01) = 0\n// : f(0.1) = 1\n// : f'(0.1) = 0\nfunction adjustLiklihood(x) {\n  if (x < 0.01) return 0.5;\n  else if (x > 0.1) return 1;\n  else return Math.min(1, - 1371 * Math.pow(x, 3) + 226 * Math.pow(x, 2) - 4.11 * x + 0.52);\n}\n\nTextContainerItem.prototype.calculateLikelihood = function () {\n  var algoritme = this._algoritme;\n  var meta = algoritme._meta;\n\n  // Adjust the single value scores\n  var count = algoritme._adjustContainerCount.adjust(this._count);\n  var shortline = 1 - algoritme._adjustShortline.adjust(this._shortlines);\n  var linebreaks = algoritme._adjustLinebreak.adjust(this._linebreaks);\n  var classcount = algoritme._adjustClasscount.adjust(this._classcount);\n  var styleratio = algoritme._adjustStyleRatio.adjust(this._styleratio);\n  var sentenses = algoritme._adjustSentensesCount.adjust(this._sentenses);\n  var paragraphs = algoritme._adjustParagraphCount.adjust(this._paragraphs);\n  var density = algoritme._adjustContainerDensity.adjust(this._density);\n\n  // Use the descriptions to calculate a match feature if possible\n  var match = 1;\n  if (meta.length > 0) {\n    var total = 0, divider = 0;\n    for (var i = 0, l = meta.length; i < l; i++) {\n      total += meta[i]._match.appearAdjust(meta[i].appear, this._match[i]);\n      divider += meta[i].appear;\n    }\n    match = total / divider;\n  }\n\n  // Calculate the likelihood\n  var scores = [\n    count, shortline, linebreaks, classcount, styleratio,\n    sentenses, paragraphs, density, match\n  ];\n  var likelihood = mathHelpers.distance(scores);\n  var minimum = Math.min.apply(Math, scores);\n\n  // Some containers may win on adjused features like (1,0) under the right\n  // conditions. The goal of this transformation of likelihood is to make\n  // those elements unlikly, however not to the point where removing them\n  // would be the same.\n  // SEE: 26c3b98f33bb6902f32535235fd7d32792df87779bdf1f86c3be15fbf3161d\n  this.likelihood = adjustLiklihood(minimum) * likelihood;\n};\n","/home/travis/build/npmtest/node-npmtest-article/node_modules/article/lib/fase-1/text-meta-item.js":"\nvar fusspos = require('fusspos');\n\nvar mathHelpers = require('../helpers-math.js');\n\nvar WORD_SPLIT = /\\s+/;\n\nfunction TextMetaItem(text) {\n  this.appear = 1;\n\n  this.text = text;\n  this.words = text.split(WORD_SPLIT);\n\n  this._match = new mathHelpers.RangeObject();\n}\nmodule.exports = TextMetaItem;\n\nTextMetaItem.prototype.increaseAppear = function () {\n  this.appear += 1;\n};\n\nTextMetaItem.prototype.calculateMatch = function (item) {\n  var search = fusspos(this.words, item.words);\n\n  // Calculate the probability for the description\n  var probability = 0;\n  if (Number.isNaN(search.middle) === false) {\n    probability = ((item.words.length - search.start) / item.words.length) * (1 - search.fussy);\n  }\n\n  // Update range object\n  this._match.update(probability);\n  return probability;\n};\n","/home/travis/build/npmtest/node-npmtest-article/node_modules/article/lib/fase-1/image.js":"\nvar url = require('url');\n\nvar domHelpers = require('../helpers-dom.js');\nvar mathHelpers = require('../helpers-math.js');\n\nvar ImageItem = require('./image-item.js');\n\nfunction ImageAlgoritme(main) {\n  this._imageMap = {};\n\n  this._images = [];\n\n  this._twitter = {\n    card: null,\n    node: null,\n    href: null\n  };\n\n  this._base = main._source;\n\n  this._adjustSize = new mathHelpers.RangeObject();\n  this._adjustMetaCount = new mathHelpers.RangeObject();\n  this._adjustBodyCount = new mathHelpers.RangeObject();\n}\nmodule.exports = ImageAlgoritme;\n\nvar metaOpenGraph = domHelpers.buildAttributeMatcher({\n  property: ['og:image']\n});\n\nvar metaTwitter = domHelpers.buildAttributeMatcher({\n  name: ['twitter:image', 'twitter:card']\n});\n\nImageAlgoritme.prototype.element = function (node) {\n  // Grap the <meta> tags, a link is a link so meta urls are good sugestions\n  if (node.tagname === 'meta' && metaOpenGraph(node.attr) && node.attr.content) {\n    this._handleOpenGraph(node);\n  }\n  else if (node.tagname === 'meta' && metaTwitter(node.attr)) {\n    this._handleTwitter(node);\n  }\n  // Grap <img> tags\n  else if (node.tagname === 'img' && node.attr.src) {\n    this._handleImage(node);\n  }\n  // Grap <object> tags\n  else if (node.tagname === 'object') {\n    this._handleObject(node);\n  }\n};\n\nImageAlgoritme.prototype._appendImage = function (hrefSource, size, type, node) {\n  var collection;\n\n  // decode HTML entities\n  var href = domHelpers.decodeEntities(domHelpers.decodeEntities(hrefSource));\n\n  // Resolve relative hrefs\n  if (href.slice(0, 7) !== 'http://' && href.slice(0, 8) !== 'https://') {\n    href = url.resolve(this._base, href);\n  }\n\n  if (this._imageMap.hasOwnProperty(href) === false) {\n    collection = this._imageMap[href] = new ImageItem(this, href);\n  } else {\n    collection = this._imageMap[href];\n  }\n\n  if (size) collection.setSize(size);\n  collection.addNode(type, node);\n};\n\n//\n// Node handlers\n//\nImageAlgoritme.prototype._handleOpenGraph = function (meta) {\n  this._appendImage(meta.attr.content, null, 'meta:og', meta, true);\n};\n\n// These are estimates on the twitter image size depending on the card type\nvar TWITTER_SIZE = {\n  'summary': { width: 120, height: 120 },\n  'summary_large_image': { width: 280, height: 150 },\n  'photo': { width: 280, height: 150 },\n  'player': { width: 350, height: 196 },\n  'product': { width: 160, height: 160 }\n};\n\nImageAlgoritme.prototype._handleTwitter = function (meta) {\n  var content = meta.attr.hasOwnProperty('value') ?\n        meta.attr.value : meta.attr.content;\n\n  // Store meta information\n  if (meta.attr.name === 'twitter:image') {\n    this._twitter.node = meta;\n    this._twitter.href = content;\n  } else if (meta.attr.name === 'twitter:card') {\n    this._twitter.card = content.toLowerCase();\n  }\n\n  // When enogth information is gained append the image\n  if (this._twitter.href !== null &&\n      this._twitter.card !== null &&\n      TWITTER_SIZE.hasOwnProperty(this._twitter.card)) {\n\n    var cardSize = TWITTER_SIZE[this._twitter.card];\n    this._appendImage(\n      this._twitter.href,\n      new mathHelpers.ImageSize(cardSize.width, cardSize.height),\n      'meta:twitter',\n      this._twitter.node\n    );\n  }\n};\n\nImageAlgoritme.prototype._handleImage = function (img) {\n  var style = domHelpers.styleParser(img.attr.style);\n  var size = new mathHelpers.ImageSize(\n    img.attr.width || style.width,\n    img.attr.height || style.height\n  );\n\n  this._appendImage(img.attr.src, size, 'img', img);\n};\n\nImageAlgoritme.prototype._handleObject = function (node) {\n  // Create param map\n  var params = {};\n  for (var i = 0, l = node.children.length; i < l; i++) {\n    if (node.children[i].tagname === 'param') {\n      params[node.children[i].attr.name] = node.children[i].attr.value;\n    }\n  }\n\n  // if a holdingImage property exists then append the image\n  if (params.hasOwnProperty('holdingImage')) {\n    var size = new mathHelpers.ImageSize(params.width, params.height);\n\n    this._appendImage(params.holdingImage, size, 'media', node);\n  }\n};\n\n// The end of the document is reached\nImageAlgoritme.prototype.end = function () {\n  var keys = Object.keys(this._imageMap);\n\n  // Inform the image object that no more nodes can be added\n  // and skip the image if it turned out to be useless\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var imageObject = this._imageMap[keys[i]];\n        imageObject.done();\n\n    // Skip useless images\n    if (imageObject.useless === false) {\n      this._images.push(imageObject);\n    }\n  }\n\n  // Calculcate the likelihood for each remainging image\n  for (var c = 0, t = this._images.length; c < t; c++) {\n    var imageObject = this._images[c];\n        imageObject.calculateLikelihood();\n  }\n\n  // Sort the images by the calculated likelihood\n  this._images = this._images.sort(function (a, b) {\n    return b.likelihood - a.likelihood;\n  });\n};\n\nImageAlgoritme.prototype.result = function () {\n  return this._images;\n};\n","/home/travis/build/npmtest/node-npmtest-article/node_modules/article/lib/fase-1/image-item.js":"\nvar url = require('url');\nvar path = require('path');\n\nvar mathHelpers = require('../helpers-math.js');\nvar domHelpers = require('../helpers-dom.js');\n\nvar GOOD_IMAGE = /jumbo|large/i;\nvar USELESS_IMAGE = /icon|logo|avatar|small|banner|promo|author|placeholder|button|track|null/i;\nvar WIDTH_TIMES_HEIGHT = /[^0-9](0|[1-9][0-9]*)(?:x|\\*)(0|[1-9][0-9]*)/g;\nvar PREFIX_WIDTH = /w([1-9][0-9]*)/;\n\nfunction ImageItem(algoritme, href) {\n  this._algoritme = algoritme;\n\n  this.from = [];\n  this.href = href;\n  this.likelihood = 0;\n\n  this._count = {\n    'body': 0,\n    'meta': 0\n  };\n\n  this._types = {\n    'meta:og' : 0,\n    'meta:twitter': 0,\n    'img': 0,\n    'media': 0\n  };\n\n  this._parsed = url.parse(href, true);\n  this._extname = path.extname(this._parsed.pathname).toLowerCase() || null;\n\n  // Set some properies by analysing the url\n  this.useless = this._uselessFromUrl();\n  this._size = this._sizeFromUrl();\n}\nmodule.exports = ImageItem;\n\n// Blacklist of domains:\n//   Please ad new domains in alphabetical order.\n//\n// NOTE: I known there are good lists with ads domains but\n// a lot of them only supports flash or woundn't appear on\n// article sites. So for performance reasons this is a self\n// maintained list.\n//\nvar BLACKLIST =  {\n  'a.collective-media.net': true,\n  'ad-apac.doubleclick.net': true,\n  'ad-incisive.grapeshot.co.uk': true,\n  'ad.doubleclick.net': true,\n  'ad.uk.doubleclick.net': true,\n  'adserver.adtech.de': true,\n  'api.twitter.com': true,\n  'b.scorecardresearch.com': true,\n  'graph.facebook.com': true,\n  'o1.qnsr.com': true,\n  'lorempixel.com': true,\n  'pubads.g.doubleclick.net': true\n};\n\nImageItem.prototype._uselessFromUrl = function () {\n  return USELESS_IMAGE.test(this.href) ||\n         this._extname === '.gif' ||\n         this._extname === '.svg' ||\n         this._parsed.pathname === '/' ||\n         BLACKLIST.hasOwnProperty(this._parsed.hostname.toLowerCase());\n};\n\nImageItem.prototype._sizeFromUrl = function () {\n  var match;\n\n  var href = this.href;\n  var query = this._parsed.query;\n\n  // Look for urls like:\n  // ACTUAL: http://example.test/cat/100x200.jpg\n  // ACTUAL: http://example.test/cat/100*200.jpg\n  // ESTIMATE: http://example.test/cat/100x0.jpg\n  // ESTIMATE: http://example.test/cat/100*0.jpg\n  // IGNORE: http://example.test/cat/16x9.jpg\n  // If more than one [w]x[w] exists use the one with the smallest area\n  var wxh = null, area = Infinity, temp = null;\n  while (match = WIDTH_TIMES_HEIGHT.exec(href)) {\n    if (match[1] === '16' && match[2] === '9') continue;\n\n    temp = new mathHelpers.ImageSize(match[1], match[2]);\n    if (temp.area !== null && temp.area < area &&\n        temp.width <= 2024 && temp.height < 2024) {\n      area = temp.area;\n      wxh = temp;\n    }\n  }\n  if (Number.isFinite(area)) return wxh;\n\n  // Look for urls like:\n  // ACTUAL: http://example.test/?w=100&h=200\n  // ESTIMATE: http://example.test/?w=100\n  // ESTIMATE: http://example.test/?h=200\n  else if (query.w && query.h) return new mathHelpers.ImageSize(query.w, query.h);\n  else if (query.w) return new mathHelpers.ImageSize(query.w, null);\n  else if (query.h) return new mathHelpers.ImageSize(null, query.h);\n\n  // Look for urls like:\n  // ACTUAL: http://example.test/?width=100&height=200\n  // ESTIMATE: http://example.test/?width=100\n  // ESTIMATE: http://example.test/?height=200\n  else if (query.width && query.height) return new mathHelpers.ImageSize(query.width, query.height);\n  else if (query.width) return new mathHelpers.ImageSize(query.width, null);\n  else if (query.height) return new mathHelpers.ImageSize(null, query.height);\n\n  // Look for urls like:\n  // ESTIMATE: http://example.test/picture_w100.jpg\n  match = href.match(PREFIX_WIDTH);\n  if (match && match[1].length > 1 && match[1].length < 5) {\n    return new mathHelpers.ImageSize(match[1], null);\n  }\n\n  return new mathHelpers.ImageSize(null, null);\n};\n\nfunction checkDisplayNone(node) {\n  return domHelpers.styleParser(node.attr.style).display === 'none';\n}\n\nfunction createTokenString(node) {\n  return node.type === 'element' ? (node.attr.id || '') + ' ' + (node.attr['class'] || '') : '';\n}\n\nImageItem.prototype.addNode = function (type, node) {\n  this._types[type] += 1;\n\n  // Check the id and class attributes for bad tokens\n  if (type === 'img' || type === 'media') {\n    var parent = node.parent;\n    var pparent = node.parent.parent;\n    if (this.useless === false) {\n      var tokens = '';\n      tokens += createTokenString(node);\n      tokens += createTokenString(parent);\n      tokens += createTokenString(pparent);\n\n      this.useless = USELESS_IMAGE.test(tokens);\n    }\n\n    // Check the style for display:none\n    if (this.useless === false) {\n      this.useless = (checkDisplayNone(node) ||\n                      checkDisplayNone(parent) ||\n                      checkDisplayNone(pparent));\n    }\n  }\n\n  this.from.push({\n    'type': type,\n    'node': node\n  });\n};\n\nImageItem.prototype.setSize = function (size) {\n  if (this._size.area === null || this._size.area < size.area) {\n    this._size = size;\n  }\n};\n\n\n// Likelihood scores for body count\nvar BODY_COUNT = [0.85, 1, 0.7, 0.6, 0.3, 0.2, 0.1];\nfunction bodyCountScore(count) {\n  if (count > 6) return 0.1;\n  else return BODY_COUNT[count];\n}\n\nvar MIN_SIZE = 120*120;\n\nImageItem.prototype.done = function () {\n  var algoritme = this._algoritme;\n  var size = this._size;\n\n  // something shouldn't be punished just because it is a media with a fallback image\n  this._count.body = bodyCountScore(this._types.media || this._types.img);\n  algoritme._adjustBodyCount.update(this._count.body);\n\n  // The meta count is just a sum\n  this._count.meta = this._types['meta:og'] + this._types['meta:twitter'];\n  algoritme._adjustMetaCount.update(this._count.meta);\n\n  // NOTE: Some images will be later be ignored, however they still contain\n  // valuables information in terms of the adjusted ranges\n  if (size.area !== null) algoritme._adjustSize.update(size.area);\n\n  // If the image wasn't already useless consider the size now\n  if (this.useless === false) {\n    this.useless = (size.area   !== null && size.area   < MIN_SIZE) ||\n                   (size.width  !== null && size.width  < 100)      ||\n                   (size.height !== null && size.height < 100);\n  }\n};\n\nImageItem.prototype.calculateLikelihood = function () {\n  var algoritme = this._algoritme;\n  var size = this._size;\n\n  var areasize;\n  if (size.area !== null) {\n    areasize = algoritme._adjustSize.adjust(size.area);\n  } else {\n    areasize = (this._types['meta:og'] > 0) ? 0.75 : 0.50;\n    if (GOOD_IMAGE.test(this.href)) areasize = areasize * 1.4;\n  }\n\n  var bannerratio = 1 - this._size.banner;\n\n  var bodycount = algoritme._adjustBodyCount.adjust(this._count.body);\n  var metacount = algoritme._adjustMetaCount.adjust(this._count.meta);\n\n  this.likelihood = (areasize * 2 + bodycount + metacount + bannerratio) / 5;\n};","/home/travis/build/npmtest/node-npmtest-article/node_modules/article/lib/fase-2/all.js":"\nvar domHelpers = require('../helpers-dom.js');\nvar mathHelpers = require('../helpers-math.js');\n\nvar Pair = require('./pair.js');\nvar Hardcode = require('./hardcode.js');\nvar Subtree = require('./subtree.js');\nvar CommonalityElement = require('./commonality-element.js');\nvar CommonalityAncestor = require('./commonality-ancestor.js');\n\nvar SOME_ALPHABETIC = /[A-Z]/i;\n\nfunction Fase2Algortime(main) {\n  this._main = main;\n\n  this._titles = [];\n  this._texts = [];\n  this._images = [];\n\n  this._pairs = [];\n\n  this._reducedTitleObject = null;\n  this._reducedTextObject = null;\n  this._reducedImageObject = null;\n\n  this._calculatedTitle = null;\n\n  this._adjustDistance = new mathHelpers.RangeObject();\n}\nmodule.exports = Fase2Algortime;\n\nfunction adjustLikelihood(list) {\n  var range = new mathHelpers.RangeObject();\n\n  if (list.length !== 0) {\n    range.update(list[0].likelihood);\n    range.update(list[list.length - 1].likelihood);\n  }\n\n  for (var c = 0, r = list.length; c < r; c++) {\n    list[c].likelihood = range.adjust(list[c].likelihood);\n  }\n\n  return list;\n}\n\n// Update the internal titles, texts and images collections,\n//  by getting the some of the best sugestions and then calculate a\n//  new adjusted the likelihood properties ranging from 1 to 0\nFase2Algortime.prototype.update = function () {\n  // Usually titles are perfect or wrong, so use only the very best sugestions\n  this._titles = adjustLikelihood( this._main._fase1title.result() ).slice(0, 3);\n\n  // Multiply text containers can contain the same correct text with some added\n  // noice, but can also be a completly diffrent container. The amount of\n  // good sugestions should allow multiply good containers, but make it difficult\n  // to get a wrong container there matches the title.\n  this._texts = adjustLikelihood( this._main._fase1text.result() );\n\n  // All images can be used, they will later be reduced and adjused from the\n  // (title, text) combination\n  this._images = adjustLikelihood( this._main._fase1image.result() );\n};\n\n// Figure what the best combination of title and text is. Its important to\n// understand that this involves looking at both title and text since there\n// are features such as closeness there can only be incorporated by creating\n// (title, text) pairs.\nFase2Algortime.prototype.combine = function () {\n  for (var i = 0, l = this._titles.length; i < l; i++) {\n    for (var n = 0, r = this._texts.length; n < r; n++) {\n      if (this._texts[n].node === this._titles[i].node) continue;\n\n      var textend = domHelpers.positionRange(this._texts[n].node)[1];\n      if (this._titles[i].node.identifyer > textend) continue;\n\n      this._pairs.push(new Pair(this, this._titles[i], this._texts[n]));\n    }\n  }\n\n  // Calculate likelihood\n  for (var j = 0, t = this._pairs.length; j < t; j++) {\n    this._pairs[j].calculateLikelihood();\n  }\n\n  // Sort pairs\n  this._pairs = this._pairs.sort(function (a, b) {\n    return b.likelihood - a.likelihood;\n  });\n};\n\n//\n// Naive approach to remove some very wrong images\n//\nFase2Algortime.prototype._reduceImage = function () {\n  var bestpair = this._pairs[0];\n  var parent = domHelpers.commonParent(bestpair.title.node, bestpair.text.node);\n\n  var images = this._images.filter(function (item) {\n    for (var i = 0, l = item.from.length; i < l; i++) {\n      if (item.from[i].type === 'meta:og') {\n        return true;\n      }\n\n      else if (item.from[i].type === 'img' || item.from[i].type === 'media') {\n        if (domHelpers.containerOf(parent, item.from[i].node)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  });\n\n  this._reducedImageObject = images[0];\n};\n\n//\n// The title can't really be reduced\n//\nFase2Algortime.prototype._reduceTitle = function () {\n  this._reducedTitleObject = this._pairs[0].title.node;\n};\n\nFase2Algortime.prototype._reduceText = function () {\n  this._reducedTextObject = this._pairs[0].text.node;\n\n  var elementAnalyser = new CommonalityElement(this._reducedTextObject);\n  var ancestorAnalyser = new CommonalityAncestor(this._reducedTextObject);\n  var tree = new Subtree(this._reducedTextObject);\n  var hardcode = new Hardcode(this._reducedTextObject);\n\n  // Remove all not even sugested images\n  var legalImages = {};\n  this._images.forEach(function (node) {\n    legalImages[node.href] = true;\n  });\n  tree.findImages().forEach(function (node) {\n    if (node.tagname === 'img' && legalImages.hasOwnProperty(node.attr.src) === false) {\n      node.remove();\n    }\n  });\n\n  // Now cleanup the subtree\n  // This will also inline some text nodes with other text nodes\n  tree.reduceTree();\n\n  // Remove all textnodes there contains only none alphabetic charecters\n  tree.findTextNodes().forEach(function (node) {\n    if (SOME_ALPHABETIC.test(node.getText()) === false) {\n      node.remove();\n    }\n  });\n\n  // Reduce the tree using hardcoded features\n  hardcode.reduce();\n\n  // Reduce the subtree again\n  tree.reduceTree();\n\n  // Reduce subtree by analysing the commonality\n  // between (tagname, classnames) and the container density\n  var ratio = [0.20, 0.35, 0.60];\n  for (var i = 0, l = ratio.length; i < l; i++) {\n    elementAnalyser.collect(tree.containerNodes());\n    elementAnalyser.reduce(ratio[i]);\n    tree.reduceTree();\n  }\n\n  // Reduce subtree by analysing the commonality between\n  // (parent-pattern, children-pattern) and the container density\n  // Compared to the element-analyser this algortime is designed to remove\n  // small containers, therefor it has a lower ratio\n  var ratio = [0.20, 0.35];\n  for (var i = 0, l = ratio.length; i < l; i++) {\n    ancestorAnalyser.collect(tree.containerNodes());\n    ancestorAnalyser.reduce(ratio[i]);\n    tree.reduceTree();\n  }\n\n  // Try to remove some small containers using the element-analyser\n  elementAnalyser.collect(tree.containerNodes());\n  elementAnalyser.reduce(0.20);\n  tree.reduceTree();\n};\n\nFase2Algortime.prototype.reduce = function () {\n  this._reduceImage();\n  this._reduceTitle();\n\n  // The reduce text mutates the DOM in such a way that the title text might\n  // be removed. Save it now so we don't have to care about it.\n  this._calculatedTitle = this._reducedTitleObject.getText().trim();\n\n  this._reduceText();\n};\n\n// Return the final result\nFase2Algortime.prototype.result = function () {\n  return {\n    title: this._calculatedTitle,\n    text: this._reducedTextObject.getText().trim(),\n    image: this._reducedImageObject ? this._reducedImageObject.href : null\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-article/node_modules/article/lib/fase-2/pair.js":"\nvar domHelpers = require('../helpers-dom.js');\n\nfunction Pair(algortime, title, text) {\n  this._algortime = algortime;\n  this.title = title;\n  this.text = text;\n\n  this.likelihood = 0;\n\n  this._distance = 0;\n  this._position = 0;\n\n  this._calculateDistance();\n  this._calculatePosition();\n}\nmodule.exports = Pair;\n\nPair.prototype._calculateDistance = function () {\n  var algortime = this._algortime;\n  var distance = domHelpers.treeDistance(this.title.node, this.text.node);\n\n  algortime._adjustDistance.update(distance);\n  this._distance = distance;\n};\n\n// If the title is with in the first 25% of the text then thats perfect,\n// otherwise do a linear scale down to zero.\nfunction titlePositionScore(position, length) {\n  if (position < length * 0.25) return 1;\n  else return 1 - ((position - length * 0.25) / length * 0.75);\n}\n\nPair.prototype._calculatePosition = function () {\n  var text = this.text.text;\n  var title = this.title.text;\n\n  var titlePosition = text.indexOf(title);\n  if (titlePosition === -1) {\n    this._position = 1;\n  } else {\n    this._position = titlePositionScore(titlePosition, text.length);\n  }\n};\n\nPair.prototype.calculateLikelihood = function () {\n  var algortime = this._algortime;\n\n  var distance = 1 - algortime._adjustDistance.adjust(this._distance);\n  var position = this._position;\n  var title = this.title.likelihood;\n  var text = this.text.likelihood;\n\n  this.likelihood = (title + text + distance + position) / 4;\n};\n","/home/travis/build/npmtest/node-npmtest-article/node_modules/article/lib/fase-2/hardcode.js":"\nvar domHelpers = require('../helpers-dom.js');\n\n//\n// HELLO FELLOW PROGRAMMER:\n// This is the easiest way to add an crazy amount of complexity.\n\n// Please make sure that there is no other alternative and that what you try\n// to change will have suffeciently impact in standard text analysis methods\n// to be jusfied.\n//\n// Also document the reason and reference to reallife tests by its ID.\n//\n\nfunction Hardcode(top) {\n  this.top = top;\n}\nmodule.exports = Hardcode;\n\nHardcode.prototype.reduce = function () {\n  var self = this;\n\n  (function recursive(node) {\n    if (node.type === 'element') {\n      if (self._removeNode(node)) {\n        node.remove();\n      }\n\n      var children = node.children.slice(0);\n      for (var i = 0, l = children.length; i < l; i++) {\n        recursive(children[i]);\n      }\n    }\n  })(this.top);\n};\n\n//\n// RegExp: author|meta\n//  Remove author information\n// RegExp: comment|reply\n//  Remove comments\n// RegExp: related|mostpopular\n//  Remove links there don't have something to do with this article\n// RegExp: next|prev\n//  Remove next and prev links since that is not currently supported\n// RegExp: share|social|follow|subscribe\n//  Remove social network buttons\n// RegExp: photo|caption|slide\n//  Remove photo descriptions\n// SEE:\n// * 5bc9df3a36efb57a22edf862cec6a28eb112e535559c194d7976fb664c922c13\n// * 26c3b98f33bb6902f32535235fd7d32792df87779bdf1f86c3b21e15fbf3161d\n// * 5a012f66c2bf0c70a0744c7483478aaa0c1a2b5b5920a72223f3a090e39df8be\n// * 488a0b7fa8bc2e0d799ac1dcb22620654777c66a9260983f369d842210f5d3d4\n// * fe32bd9876a32fd93d180c282959cc80bc5349f8b5eeae759eb5f5c801536847\n// * 44f750fab67bb9f54f5b5cc90bc34d55cff06260a3e63245856a6e57fcda5906\n// * 6b095375a53dfc7994a032e2efac70f43a4fac9303d549256d88b8f7cecadd50\n// * f0ad1615c376d042a458dd4fc713b0d17124d74ae07becaab78bfb7a82dd14b4\n//\n// RegExp: location\n//  Remove meta information about the location\n// RegExp: timestamp\n//  Remove meta information about the time\n// RegExp: description\n//  REmove meta data about some image description\n// SEE:\n// * 09198e90b6a14acfef0d4044606b8fd5801648f98763bf967f181aabaf59804d\n// * 0a8c510c3691d8e68ccc749559680257a382fe792a3d4d8531fb285cd74c3492\n// * 0e55dcdbeb54c88ee87942b9fef7ea5398fa9a1e83493d55844b479506a80fd8\n//\n// RegExp: flash\n//  Remove elements shouldn't contain any text information\n//\n// RegExp: advertisement\n//  Remove advertisement containers\n// SEE:\n// * ccada6580a0b1d05408db6d59cca18c2707530139807ebf112de8f6615d32b90\n//\n// RegExp: nav\n//  Remove menus\n// SEE:\n// * ccada6580a0b1d05408db6d59cca18c2707530139807ebf112de8f6615d32b90\n//\n// RegExp: login\n//  Remove login containers\n// SEE:\n// * ccada6580a0b1d05408db6d59cca18c2707530139807ebf112de8f6615d32b90\n//\n// RegExp: nocontent\n// SEE: 8d612a03fa42a2fb014b59534c46c9590da90fbeb91ac50938cdfa36dd274e23\n//\n// RegExp: footer|cookies|email|account|promo\n// SEE: ccada6580a0b1d05408db6d59cca18c2707530139807ebf112de8f6615d32b90\n//\n// RegExp: mmw\n// SEE: 26c3b98f33bb6902f32535235fd7d32792df87779bdf1f86c3b21e15fbf3161d\n//\nvar NEGATIVE_KEYWORD = /author|comment|related|meta|caption|share|photo|social|next|prev|location|timestamp|mostpopular|flash|advertisement|nav|login|subscribe|slide|reply|nocontent|follow|footer|email|account|promo|cookies|mmw/i;\nvar NEGATIVE_CLASSNAME = /(^| )(hidden)( |$)/\nHardcode.prototype._removeNode = function (node) {\n  if (node.attr.hasOwnProperty('class') && NEGATIVE_KEYWORD.test(node.attr['class'])) {\n    return true;\n  }\n\n  if (node.attr.hasOwnProperty('id') && NEGATIVE_KEYWORD.test(node.attr.id)) {\n    return true;\n  }\n\n  if (node.attr.hasOwnProperty('class') && NEGATIVE_CLASSNAME.test(node.attr['class'])) {\n    return true;\n  }\n\n  if (domHelpers.NO_TEXT_ELEMENTS.hasOwnProperty(node.tagname)) {\n    return true;\n  }\n\n  if (domHelpers.IGNORE_TEXT_ELEMENT.hasOwnProperty(node.tagname)) {\n    return true;\n  }\n\n  return false;\n};\n","/home/travis/build/npmtest/node-npmtest-article/node_modules/article/lib/fase-2/subtree.js":"\nvar nodes = require('../nodes.js');\nvar domHelpers = require('../helpers-dom.js');\n\n//\n// Mutate the DOM of the best text container so only the article text is left\n//\nfunction Subtree(node) {\n  this.top = node;\n}\nmodule.exports = Subtree;\n\nSubtree.prototype.findImages = function () {\n  var images = [];\n\n  (function recursive(node) {\n    for (var i = 0, l = node.children.length; i < l; i++) {\n      var subnode = node.children[i];\n      if (subnode.type === 'text') continue;\n\n      if (subnode.tagname === 'img' || subnode.tagname === 'object') {\n        images.push(subnode);\n      } else {\n        recursive(subnode);\n      }\n    }\n  })(this.top);\n\n  return images;\n};\n\nSubtree.prototype.findTextNodes = function () {\n  var nodes = [];\n\n  (function recursive(node) {\n    for (var i = 0, l = node.children.length; i < l; i++) {\n      var subnode = node.children[i];\n\n      if (subnode.type === 'text') {\n        nodes.push(subnode);\n      } else {\n        recursive(subnode);\n      }\n    }\n  })(this.top);\n\n  return nodes;\n};\n\nSubtree.prototype.surroundingBrElems = function (node) {\n  var beforeCount = 0;\n  var beforeElem = node;\n  while((beforeElem = beforeElem.before()) &&\n        beforeElem.type === 'element' && beforeElem.tagname === 'br') {\n    beforeCount += 1;\n  }\n\n  var afterCount = 0;\n  var afterElem = node;\n  while((afterElem = afterElem.after()) &&\n        afterElem.type === 'element' && afterElem.tagname === 'br') {\n    afterCount += 1;\n  }\n\n  return beforeCount + afterCount;\n};\n\nSubtree.prototype.surroundingBlockElem = function (node) {\n  var before, beforeNode = node;\n  while (before = beforeNode.before()) {\n    if (before.type === 'element' &&\n        domHelpers.BLOCK_ELEMENTS.hasOwnProperty(before.tagname)) {\n      return true;\n    }\n\n    if (before !== beforeNode.parent) break;\n    beforeNode = before;\n  }\n\n  var after, afterNode = node;\n  while (after = afterNode.before()) {\n\n    if (after.type === 'element' &&\n        domHelpers.BLOCK_ELEMENTS.hasOwnProperty(after.tagname)) {\n      return true;\n    }\n\n    if (after !== afterNode.parent) break;\n    afterNode = after;\n  }\n\n  return false;\n};\n\nfunction hasTextChild(node) {\n  for (var i = 0, l = node.children.length; i < l; i++) {\n    if (node.children[i].type === 'text') return true;\n  }\n  return false;\n}\n\n// This method reduces the tree so only the important elements are left\nSubtree.prototype.reduceTree = function () {\n  var self = this;\n\n  if (this.top.children.length === 0) return;\n\n  (function recursive(node) {\n    // Skip element if its already removed\n    if (node.inTree === false) { }\n\n    // Cleanup text nodes\n    else if (node.type === 'text') {\n      // Remove empty text nodes\n      if (node.getText().trim() === '') {\n        node.remove();\n      }\n      else {\n        var afterNode = node.after();\n        if (afterNode.type === 'text') {\n          node.append(afterNode);\n          node.close();\n          afterNode.remove();\n        }\n      }\n    }\n    // Cleanup elements\n    else if (node.type === 'element') {\n      var children = node.children.slice(0);\n      for (var i = 0, l = children.length; i < l; i++) {\n        recursive(children[i]);\n      }\n\n      // move <img> and <object> nodes to the nearest block container\n      if (node.tagname === 'img' || node.tagname === 'object') {\n        var destination = node;\n        while (destination = destination.parent) {\n          if (destination === self.top || (\n              domHelpers.BLOCK_ELEMENTS.hasOwnProperty(destination.tagname) &&\n              hasTextChild(destination) === false)\n          ) {\n            break;\n          }\n        }\n\n        if (destination !== node.parent) {\n          node.remove();\n          destination.insert(node, 0);\n        }\n      }\n      // Reduce <br> tags to the level there matters\n      else if (node.tagname === 'br') {\n        // Remove this br tag if there are enoght <br> tags or there is a\n        // surrounding block element\n        if (self.surroundingBrElems(node) >= 2 || self.surroundingBlockElem(node)) {\n          node.remove();\n        }\n      }\n      // elements with no children, can most likely just be removed or replaced\n      else if (node.children.length === 0) {\n        // Replace empty block elements with br tags\n        if (domHelpers.BLOCK_ELEMENTS.hasOwnProperty(node.tagname)) {\n          // Figure how many br tags there should be created and create them\n          if (self.surroundingBlockElem(node) === false) {\n            var brs = Math.max(0, 2 - self.surroundingBrElems(node));\n            var index = node.parent.children.indexOf(node);\n            for (var b = 0; b < brs; b++) {\n              var br = new nodes.ElementNode(node.parent, 'br', {});\n                  br.close();\n              node.parent.children.splice(index, 0, br);\n            }\n          }\n        }\n        // Concat textnodes if possible\n        else {\n          var before = node.before();\n          var after = node.after();\n          if (before.type === 'text' && after.type === 'text') {\n            before.append(after);\n            before.close();\n            after.remove();\n          }\n        }\n\n        // Now remove the node, there don't contain anything\n        node.remove();\n      }\n      // If this is an style element with only a text node as a child\n      else if (domHelpers.INLINE_TEXT_TAGS.hasOwnProperty(node.tagname) &&\n               node.children.length === 1 && node.children[0].type === 'text') {\n        var textnode = node.children[0];\n        var mergenode = null;\n\n        var before = node.before();\n        var after = node.after();\n\n        // Find or create the text node that the child should be merge intro\n        if (before.type === 'text') {\n          mergenode = before;\n        } else if (after.type === 'text') {\n          mergenode = new nodes.TextNode(node.parent, '');\n          var mergeInsert = node.parent.children.indexOf(after);\n          node.parent.children.splice(mergeInsert, 0, mergenode);\n        }\n\n        // If a mergenode was found, append the textnode and if possible the\n        // after node too.\n        if (mergenode !== null) {\n          mergenode.append(textnode);\n          node.remove();\n\n          if (after.type === 'text') {\n            mergenode.append(after);\n            after.remove();\n          }\n\n          mergenode.close();\n        }\n      }\n    }\n  })(this.top);\n};\n\n// Grap and create container nodes\nSubtree.prototype.containerNodes = function () {\n  var containers = [];\n\n  (function recursive(node) {\n    for (var i = 0, l = node.children.length; i < l; i++) {\n      var subnode = node.children[i];\n\n      if ((subnode.blocky === false ||\n          (subnode.blocky === true && subnode.blockyChildren === false)) &&\n          subnode.density !== 0) {\n        containers.push(subnode);\n      } else {\n        recursive(subnode);\n      }\n    }\n  })(this.top);\n\n  return containers;\n};\n\n//\n// A secret little gem, you can use to print out the subtree :)\n//\nfunction attrStringify(attr) {\n  var names = Object.keys(attr);\n  var str = '';\n  for (var i = 0, l = names.length; i < l; i++) {\n    str += names[i] + '=\"' + attr[names[i]].slice(0, 20) + (attr[names[i]].length > 20 ? '...' : '') + '\" ';\n  }\n  return str;\n}\n\nSubtree.prototype.print = function () {\n  var printout = '';\n  var containers = this.containerNodes();\n\n  (function recursive(indent, node) {\n    var blocky = containers.indexOf(node) !== -1;\n\n    printout += indent + (blocky ? '\\x1B[33m' : '');\n    printout += node.print();\n    printout += '\\n' + (blocky ? '\\x1B[39m' : '');\n\n    if (node.type === 'element') {\n      for (var i = 0, l = node.children.length; i < l; i++) {\n        recursive(indent + '  ', node.children[i]);\n      }\n    }\n  })('', this.top);\n\n  return printout;\n};\n\n","/home/travis/build/npmtest/node-npmtest-article/node_modules/article/lib/fase-2/commonality-element.js":"\nvar util = require('util');\nvar commonality = require('./commonality.js');\nvar CommonalityInterface = commonality.Interface;\nvar CommanalityMatrix = commonality.Matrix;\n\n//\n// Create the exposed class\n//\nfunction CommonalityElement(top) {\n  CommonalityInterface.call(this, ElementMatrix, top);\n}\nmodule.exports = CommonalityElement;\nutil.inherits(CommonalityElement, CommonalityInterface);\n\n//\n// Collects features and bind them to the node density\n//\nfunction ElementMatrix(top) {\n  CommanalityMatrix.call(this, top);\n\n  this.row(' ');\n  this.collum(' ');\n  this.classlist = top.root.classlist;\n}\nutil.inherits(ElementMatrix, CommanalityMatrix);\n\n// Create a list of classnames there contains more than one node in the tree\nElementMatrix.prototype._classNames = function (node) {\n  var reducedClassnames = [];\n  if (node.type === 'element') {\n    for (var n = 0, r = node.classes.length; n < r; n++) {\n      if (this.classlist.get(node.classes[n]).length > 1) {\n        reducedClassnames.push(node.classes[n]);\n      }\n    }\n  }\n\n  return reducedClassnames.length === 0 ? [' '] : reducedClassnames;\n};\n\nElementMatrix.prototype.append = function (node) {\n  var tagname = node.type === 'text' ? ' ' : node.tagname;\n\n  // Create a list of classnames there contains more than one node in the tree\n  var classnames = this._classNames(node);\n\n  // prepear all classname collums for a new tagname\n  var rowId = this.row(tagname);\n\n  for (var i = 0, l = classnames.length; i < l; i++) {\n    // Create a new collum in case this is a new tagname\n    var collumId = this.collum(classnames[i]);\n\n    // Store the node\n    this.nodeMatrix[collumId][rowId].push(node);\n  }\n};\n\nElementMatrix.prototype.cellName = function (a, b) {\n  return (this.rowNames[b] === ' ' ? 'null' : this.rowNames[b]) +\n         ('.') +\n         (this.collumNames[a] === ' ' ? 'null' : this.collumNames[b]);\n};\n","/home/travis/build/npmtest/node-npmtest-article/node_modules/article/lib/fase-2/commonality.js":"\nvar ttest = require('ttest');\nvar summary = require('summary');\n\n//\n// The exposed API used in all.js\n//\nfunction CommonalityInterface(MatrixConstructor, top) {\n  this.top = top;\n  this.length = null;\n  this.matrix = null;\n\n  this.MatrixConstructor = MatrixConstructor;\n}\nexports.Interface = CommonalityInterface;\n\nCommonalityInterface.prototype.collect = function (nodelist) {\n  this.length = nodelist.length;\n\n  this.matrix = new this.MatrixConstructor(this.top);\n  for (var i = 0, l = nodelist.length; i < l; i++) {\n    this.matrix.append(nodelist[i]);\n  }\n  this.matrix.summarise();\n};\n\nvar ttest_options = {\n  alpha: 0.05,\n  alternative: \"greater\"\n};\n\nCommonalityInterface.prototype.reduce = function (maxRatio) {\n  var maxRemoval = this.top.getText().length * maxRatio;\n\n  var dim = this.matrix.dim;\n  var matrix = this.matrix.summaryMatrix;\n  var best = matrix[this.matrix.bestIndex[0]][this.matrix.bestIndex[1]];\n\n  for (var a = 0; a < dim[0]; a++) {\n    for (var b = 0; b < dim[1]; b++) {\n      var compare = matrix[a][b];\n\n      // Skip self and none compare summary\n      if (compare === best || compare.size() === 0) {\n        continue;\n      }\n\n      else if (this.matrix.cellTextLength(a, b) > maxRemoval) {\n        continue;\n      }\n\n      // If the maximal value in compare is much less than the minimal value in\n      // the best dataset, its pretty safe to remove the currently compared\n      // nodes\n      else if (compare.max() * 1.25 < best.min()) {\n        this.matrix.removeCell(a, b);\n      }\n\n      // If there is only two values then there is not enogth data to perfrom\n      // a statical valid analysis, but if maxmean is 25% greater than the\n      // alternative it should be good enogth\n      else if (compare.size() === 1 || best.size() === 1) {\n        if (compare.mean() * 1.25 < best.mean()) {\n          this.matrix.removeCell(a, b);\n        }\n      }\n\n      // Check if the maxdataset mean is greater than the current tagname\n      else if (ttest(best, compare, ttest_options).valid() === false) {\n        this.matrix.removeCell(a, b);\n      }\n    }\n  }\n};\n\n//\n// Some abstact API for the commanality matrix\n//\nfunction CommanalityMatrix(classlist) {\n  // space will identify a text node and/or an element node without any classnames\n  this.rowKeys = {};\n  this.rowNames = [];\n\n  this.collumKeys = {};\n  this.collumNames = [];\n\n  this.nodeMatrix = [];\n  this.summaryMatrix = [];\n\n  this.dim = [0, 0];\n\n  this.bestIndex = [-1, -1];\n  this._bestNodes = {};\n}\nexports.Matrix = CommanalityMatrix;\n\n//\n// Extend the rows or the collums\n//\nfunction arrayVector(size) {\n  var vec = new Array(size);\n  for (var i = 0; i < size; i++) vec[i] = [];\n  return vec;\n}\n\nfunction zeroVector(size) {\n  var vec = new Array(size);\n  for (var i = 0; i < size; i++) vec[i] = 0;\n  return vec;\n}\n\nCommanalityMatrix.prototype.collum = function (name) {\n  if (this.collumKeys.hasOwnProperty(name) === false) {\n    this.collumKeys[name] = this.collumNames.length;\n    this.collumNames.push(name);\n\n    this.nodeMatrix.push(arrayVector(this.rowNames.length));\n    this.summaryMatrix.push(zeroVector(this.rowNames.length));\n  }\n\n  return this.collumKeys[name];\n};\n\nCommanalityMatrix.prototype.row = function (name) {\n  if (this.rowKeys.hasOwnProperty(name) === false) {\n    this.rowKeys[name] = this.rowNames.length;\n    this.rowNames.push(name);\n\n    for (var a = 0, b = this.collumNames.length; a < b; a++) {\n      this.nodeMatrix[a].push([]);\n      this.summaryMatrix[a].push(0);\n    }\n  }\n\n  return this.rowKeys[name];\n};\n\n//\n// Summarize the matrix\n//\nfunction node2density(node) {\n  return node.density;\n}\n\n// Create a summary matrix and find the highest mean\nCommanalityMatrix.prototype.summarise = function () {\n  var dim = this.dim = [this.summaryMatrix.length, this.summaryMatrix[0].length];\n  var bestMean = -1;\n\n  for (var a = 0; a < dim[0]; a++) {\n    for (var b = 0; b < dim[1]; b++) {\n      var stat = this.summaryMatrix[a][b] = summary(this.nodeMatrix[a][b].map(node2density));\n      var mean = stat.mean();\n      if (isNaN(mean) === false && mean > bestMean) {\n        bestMean = mean;\n        this.bestIndex = [a, b];\n      }\n    }\n  }\n\n  var nodes = this.nodeMatrix[this.bestIndex[0]][this.bestIndex[1]];\n  for (var i = 0, l = nodes.length; i < l; i++) {\n    this._bestNodes[ nodes[i].identifyer ] = 1;\n  }\n};\n\n//\n// Some basic cell operations\n//\nCommanalityMatrix.prototype.removeCell = function (a, b) {\n  var nodelist = this.nodeMatrix[a][b];\n\n  for (var i = 0, l = nodelist.length; i < l; i++) {\n    if (this._bestNodes.hasOwnProperty(nodelist[i].identifyer) === false) {\n      nodelist[i].remove();\n    }\n  }\n};\n\nCommanalityMatrix.prototype.cellTextLength = function (a, b) {\n  var nodelist = this.nodeMatrix[a][b];\n  var length = 0;\n  for (var i = 0, l = nodelist.length; i < l; i++) {\n    length += nodelist[i].getText().length;\n  }\n  return length;\n};\n\n//\n// Debug methods\n//\nCommanalityMatrix.prototype.print = function () {\n  var table = require('text-table');\n  var matrix = [ [''].concat(this.collumNames) ];\n\n  for (var b = 0; b < this.dim[1]; b++) {\n    var row = [this.rowNames[b]];\n    matrix.push(row);\n\n    for (var a = 0; a < this.dim[0]; a++) {\n      var str = '';\n      if (a === this.bestIndex[0] && b === this.bestIndex[1]) str += '**';\n      str += this.summaryMatrix[a][b].size() + ' ~ ' + this.summaryMatrix[a][b].mean().toPrecision(3);\n      if (a === this.bestIndex[0] && b === this.bestIndex[1]) str += '**';\n\n      row.push(str);\n    }\n  }\n\n  return table(matrix);\n};\n","/home/travis/build/npmtest/node-npmtest-article/node_modules/article/lib/fase-2/commonality-ancestor.js":"\nvar util = require('util');\nvar commonality = require('./commonality.js');\nvar CommonalityInterface = commonality.Interface;\nvar CommanalityMatrix = commonality.Matrix;\n\n//\n// Create the exposed class\n//\nfunction CommonalityAncestor(top) {\n  CommonalityInterface.call(this, AncestorMatrix, top);\n}\nmodule.exports = CommonalityAncestor;\nutil.inherits(CommonalityAncestor, CommonalityInterface);\n\n//\n// Collects features and bind them to the node density\n//\nfunction AncestorMatrix(top) {\n  CommanalityMatrix.call(this, top);\n\n  this.classlist = top.root.classlist;\n}\nutil.inherits(AncestorMatrix, CommanalityMatrix);\n\nAncestorMatrix.prototype._parentPattern = function (node) {\n  var parent = node.parent;\n\n  var pattern = parent.tagname;\n  if (parent.attr.hasOwnProperty('id')) {\n    pattern += '#' + parent.attr.id;\n  } else if (parent.classes.length > 0) {\n    pattern += '.' + parent.classes.sort().join('.');\n  }\n\n  return pattern;\n};\n\nAncestorMatrix.prototype._childrenPattern = function (node) {\n  if (node.type === 'text' || node.children.length === 0) return '#none';\n\n  var children = node.children;\n\n  var pattern = [];\n  for (var i = 0, l = children.length; i < l; i++) {\n    if (children[i].type === 'element') {\n      if (children[i].tagname !== 'br' && children[i].tagname !== 'wbr') {\n        pattern.push(children[i].tagname);\n      }\n    } else {\n      if (pattern[pattern.length - 1] !== '#text') {\n        pattern.push('#text');\n      }\n    }\n  }\n\n  return pattern.join(',');\n};\n\nAncestorMatrix.prototype.append = function (node) {\n  var rowId = this.row(this._parentPattern(node));\n  var collumId = this.collum(this._childrenPattern(node));\n\n  // Store the node\n  this.nodeMatrix[collumId][rowId].push(node);\n};\n\nAncestorMatrix.prototype.cellName = function (a, b) {\n  return this.rowNames[b] + '.' + this.collumNames[a];\n};\n","/home/travis/build/npmtest/node-npmtest-article/node_modules/article/tools/benchmark.js":"\nvar fs = require('fs');\nvar path = require('path');\nvar startpoint = require('startpoint');\nvar async = require('async');\nvar summary = require('summary');\n\nvar article = require('../lib/article.js');\n\nif (!global.gc) {\n  return console.error('please add the --expose-gc flag');\n}\n\n// CREATE ARTICLE FILE ARRAY\nvar ARTICLES = JSON.parse(\n  fs.readFileSync(\n    path.resolve(__dirname, '../test/reallife/datamap.json')\n  )\n)\n.map(function (item, index) {\n  return {\n    file: path.resolve(__dirname, '../test/reallife/source/' + item.key + '.html'),\n    key: item.key,\n    num: index + 1,\n    href: item.href\n  };\n})\n.slice(0, process.argv[2]);\n\nconsole.log('Benchmarking on ' + ARTICLES.length + ' articles');\nconsole.log();\nconsole.log();\nconsole.log();\nconsole.log();\nconsole.log();\nconsole.log();\nconsole.log();\n\n// RUN GC\nglobal.gc();\n\nvar TIMES = [];\n\nasync.eachSeries(\n  ARTICLES,\n  function (item, done) {\n    // Preread file to prevent I/O interference\n    var stream = startpoint(fs.readFileSync(item.file));\n    console.log(item.num + ' / ' + ARTICLES.length + ' ' + item.key);\n\n    // Analyse file\n    var tic = process.hrtime();\n    stream.pipe(article(item.href, function (err) {\n      var toc = process.hrtime(tic);\n      TIMES.push(toc);\n\n      setImmediate(done.bind(null, err));\n    }));\n  },\n  function (err) {\n    if (err) throw err;\n\n    var stat = summary(TIMES.map(function (time) {\n      return (time[0] * 1e9 + time[1]) / 1e6;\n    }));\n\n    console.log(stat.mean().toPrecision(6) + ' ms ± ' + stat.sd().toPrecision(6));\n  }\n);\n","/home/travis/build/npmtest/node-npmtest-article/node_modules/article/tools/googlenews.js":"\nvar fs = require('fs');\nvar url = require('url');\nvar path = require('path');\nvar async = require('async');\nvar crypto = require('crypto');\nvar request = require('request');\nvar endpoint = require('endpoint');\nvar mappoint = require('mappoint');\nvar feedparser = require('feedparser');\n\nvar datamap = require('../test/reallife/datamap.json');\n\nvar key2url = {};\nfor (var i = 0, l = datamap.length; i < l; i++) {\n  key2url[datamap[i].key] = datamap[i].href;\n}\n\nfunction makeKey(href) {\n  return crypto.createHash('sha256').update(new Buffer(href)).digest('hex');\n}\n\nfunction processFeed(href, done) {\n  console.log('downloading feed ...');\n  console.log('from: ' + href);\n  console.log('');\n  request(href)\n    .pipe(feedparser({addmeta: false, feedurl: href}))\n    .pipe(mappoint({objectMode: true}, function (article, done) {\n      // skip google redirect\n      var href = url.parse(article.link, true).query.url;\n\n      // create item\n      done(null, {\n        'labeled': false,\n        'key': makeKey(href),\n        'href': href,\n        'why': 'google news scrape',\n        'state': '0-0-0'\n      });\n    }))\n    .pipe(endpoint({objectMode: true}, function (err, links) {\n      if (err) return done(err);\n\n      // Remove existing links from the list\n      links = links.filter(function (item) {\n        return !key2url.hasOwnProperty(item.key);\n      });\n\n      console.log('Found ' + links.length + ' new articles');\n      console.log('---------');\n\n      // Download and analyse\n      async.eachLimit(links, 10, processArticle, done);\n    }));\n}\n\nfunction processArticle(item, done) {\n  console.log('downloading article ...');\n  console.log('from: ' + item.href);\n\n  request(item.href, function (err, res, body) {\n    // They may simply be down, not fail anything because of that\n    if (err) {\n      console.error(err);\n      return done(null);\n    }\n  \n    if (res.statusCode !== 200) {\n      console.error('Status code must be 200, was ' + res.statusCode);\n      return done(null);\n    }\n  \n    if (body.length === 0) {\n      console.error('No body was send');\n      return done(null);\n    }\n\n    // We better check again, before saving anything\n    if (key2url.hasOwnProperty(item.key)) {\n      return done(null); \n    }\n\n    // Add item to datamap\n    key2url[item.key] = item.href;\n    datamap.push(item);\n\n    // Since this is too much for anyone to validate, just save an empty object\n    async.parallel([\n      function (done) {\n        fs.writeFile(\n          path.resolve(__dirname, '../test/reallife/source/', item.key + '.html'),\n          body,\n          done\n        );\n      },\n      function (done) {\n        fs.writeFile(\n          path.resolve(__dirname, '../test/reallife/expected/', item.key + '.json'),\n          '{}\\n',\n          done\n        );\n      }\n    ], done);\n  });\n}\n\nvar feeds = [\n  'https://news.google.com/news/feeds?&topic=m&output=rss', // Health\n  'https://news.google.com/news/feeds?&topic=s&output=rss', // Sports\n  'https://news.google.com/news/feeds?&topic=w&output=rss', // World\n  'https://news.google.com/news/feeds?&topic=tc&output=rss', // Technology\n  'https://news.google.com/news/feeds?&topic=snc&output=rss', // Science\n];\n\nasync.eachSeries(feeds, processFeed, function (err) {\n  if (err) {\n    console.error(err);\n  }\n\n  console.log('---------');\n  console.log('');\n  console.log('processed all feeds');\n  console.log('writeing datamap ...');\n  \n  fs.writeFile(\n    path.resolve(__dirname, '../test/reallife/datamap.json'),\n    JSON.stringify(datamap, null, '\\t') + '\\n',\n    function (err) {\n      console.log('All done :)');\n    }\n  );\n});\n","/home/travis/build/npmtest/node-npmtest-article/node_modules/article/tools/reallife.js":"\nvar fs = require('fs');\nvar path = require('path');\nvar crypto = require('crypto');\nvar request = require('request');\n\nvar datamap = require('../test/reallife/datamap.json');\n\nif (process.argv.length < 4) {\n  return console.error('node reallife.js url why');\n}\n\nvar href = process.argv[2];\nvar why = process.argv[3];\nvar key = crypto.createHash('sha256').update(new Buffer(href)).digest('hex');\n\nconsole.log('downloading ...');\nrequest({url: href, jar: true}, function (err, res, body) {\n  if (err) throw err;\n\n  if (res.statusCode !== 200) {\n    return console.error('Status code must be 200');\n  }\n\n  if (body.length === 0) {\n    return console.error('No body was send');\n  }\n\n  for (var i = 0, l = datamap.length; i < l; i++) {\n    if (datamap[i].key === key) throw new Error('this url already seams to exists');\n  }\n\n  datamap.push({\n    'labeled': false,\n    'key': key,\n    'href': href,\n    'why': why,\n    'state': '0-0-0'\n  });\n\n  // Update main testfiles\n  fs.writeFileSync(\n    path.resolve(__dirname, '../test/reallife/source/', key + '.html'),\n    body\n  );\n  console.log('wrote source file');\n\n  fs.writeFileSync(\n    path.resolve(__dirname, '../test/reallife/expected/', key + '.json'),\n    '{}\\n'\n  );\n  console.log('write empty expected file');\n\n  // Update datamap\n  fs.writeFileSync(\n    path.resolve(__dirname, '../test/reallife/datamap.json'),\n    JSON.stringify(datamap, null, '\\t') + '\\n'\n  );\n  console.log('appended to datamap');\n});\n","/home/travis/build/npmtest/node-npmtest-article/node_modules/article/tools/analyse/analyser.js":"\nvar fs = require('fs');\nvar path = require('path');\nvar article = require('../../lib/article.js');\n\nvar reader = fs.createReadStream(\n  path.resolve(__dirname, '../../test/reallife/source/' + process.argv[2] + '.html')\n);\n\nreader.pipe(article(process.argv[3], function (err, result) {\n  process.send([err ? {message: err.message, stack: err.stack} : null, result]);\n  process.disconnect();\n}));\n\n","/home/travis/build/npmtest/node-npmtest-article/node_modules/article/tools/analyse/index.js":"\nvar st = require('st');\nvar path = require('path');\nvar http = require('http');\nvar WebSocketServer = require('ws').Server;\n\nvar Logic = require('./logic.js');\n\nvar server = http.createServer();\nvar wss = new WebSocketServer({server: server});\n\nserver.listen(9100, '127.0.0.1', function () {\n  console.log('analyse server ready on http://localhost:9100');\n});\n\n// Just serve static files\nserver.on('request', st({\n  path: path.resolve(__dirname, 'static'),\n  url: '/',\n  index: 'index.html',\n  passthrough: false\n}));\n\n// Handle the UI communation\nwss.on('connection', function (ws) {\n  var handler = new Logic(ws);\n\n  handler.open();\n\n  ws.once('close', function () {\n    handler.close();\n  });\n\n  ws.on('message', function (msg) {\n    handler.message(JSON.parse(msg));\n  });\n});\n","/home/travis/build/npmtest/node-npmtest-article/node_modules/article/tools/analyse/logic.js":"\nvar fs = require('fs');\nvar path = require('path');\nvar async = require('async');\nvar fork = require('child_process').fork;\n\nvar datamapSource = fs.readFileSync(path.resolve(__dirname, '../../test/reallife/datamap.json'));\nvar datamap = JSON.parse(datamapSource);\n\n// Create a items list based on process.argv\nvar ITEMS = (function () {\n  var items = JSON.parse(datamapSource);\n  items.forEach(function (item, mapIndex) {\n    item.mapIndex = mapIndex;\n  });\n\n  if (process.argv[2] !== undefined) {\n    var argv = process.argv.slice(2);\n\n    items = items.filter(function (item) {\n      var index = argv.indexOf(item.key);\n      if (index !== -1) {\n        argv.splice(index, 1);\n        return true;\n      }\n      return false;\n    });\n\n    if (argv.length !== 0) {\n      throw new Error('Could not find ' + JSON.stringify(argv));\n    }\n  }\n\n  return items;\n})();\n\nITEMS = ITEMS.map(function (item, index) {\n  item.index = index;\n  return item;\n});\n\nvar LASTINDEX = 0;\n\nfunction Logic(ws) {\n  this.ws = ws;\n}\nmodule.exports = Logic;\n\nLogic.prototype.send = function (msg) {\n  this.ws.send(JSON.stringify(msg));\n};\n\nLogic.prototype.open = function () {\n  this.send({\n    'what': 'ready',\n    'data': ITEMS.length\n  });\n\n  this._sendResult(LASTINDEX);\n};\n\nLogic.prototype.close = function () { };\n\nLogic.prototype._sendResult = function (index) {\n    LASTINDEX = index;\n    var self = this;\n\n    async.parallel({\n      actual: function (done) {\n        var child = fork(path.resolve(__dirname, 'analyser'), [ITEMS[index].key, ITEMS[index].href], {\n          stdio: ['ignore', process.stdout, process.stderr, 'ipc']\n        });\n\n        child.once('message', function (result) {\n          if (result[0]) {\n            var err = new Error(result[0].message);\n                err.stack = result[0].stack;\n            return done(err);\n          } else {\n            done(null, result[1]);\n          }\n        });\n      },\n      expected: function (done) {\n        fs.readFile(\n          path.resolve(__dirname, '../../test/reallife/expected/' + ITEMS[index].key + '.json'),\n          function (err, expected) {\n            if (err) return done(err);\n            else done(null, JSON.parse(expected));\n          }\n        );\n      }\n    }, function (err, compare) {\n      if (err) return self.send({ 'what': 'error', 'data': err.message });\n      \n      self.send({'what': 'compare', 'data': {\n        'item': ITEMS[index],\n        'compare': compare\n      }});\n\n      self._resume();\n    });\n};\n\nLogic.prototype._resume = function () {\n  this.send({'what': 'resume'});\n};\n\nLogic.prototype._saveState = function (index, state) {\n  var self = this;\n  \n  datamap[ ITEMS[index].mapIndex ].state = state;\n  ITEMS[index].state = state;\n  \n  fs.writeFile(\n    path.resolve(__dirname, '../../test/reallife/datamap.json'),\n    JSON.stringify(datamap, null, '\\t') + '\\n',\n    function (err) {\n      if (err) return self.send({ 'what': 'error', 'data': err.message });\n\n      self._resume();\n    }\n  );\n};\n\nvar HANDLERS = {\n  load: function (index) {\n    this._sendResult(index);\n  },\n  state: function (data) {\n    this._saveState(data.index, data.state);\n  }\n};\n\nLogic.prototype.message = function (msg) {\n  if (HANDLERS.hasOwnProperty(msg.what) === false) {\n    this.send({ 'what': 'error', 'data': 'no such command' });\n  } else {\n    HANDLERS[msg.what].call(this, msg.data);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-article/node_modules/article/tools/label/index.js":"\nvar st = require('st');\nvar path = require('path');\nvar http = require('http');\nvar WebSocketServer = require('ws').Server;\n\nvar Logic = require('./logic.js');\n\nvar server = http.createServer();\nvar wss = new WebSocketServer({server: server});\n\nserver.listen(9000, '127.0.0.1', function () {\n  console.log('label server ready on http://localhost:9000');\n});\n\n// Just serve static files\nserver.on('request', st({\n  path: path.resolve(__dirname, 'static'),\n  url: '/',\n  index: 'index.html',\n  passthrough: false\n}));\n\n// Handle the UI communation\nwss.on('connection', function (ws) {\n  var handler = new Logic(ws);\n\n  handler.open();\n\n  ws.once('close', function () {\n    handler.close();\n  });\n\n  ws.on('message', function (msg) {\n    handler.message(JSON.parse(msg));\n  });\n});\n","/home/travis/build/npmtest/node-npmtest-article/node_modules/article/tools/label/logic.js":"\nvar fs = require('fs');\nvar path = require('path');\nvar async = require('async');\nvar request = require('request');\nvar startpoint = require('startpoint');\n\nvar analyse = require('../../lib/article.js');\n\nvar datamap = require('../../test/reallife/datamap.json');\nvar UNLABLED = datamap.map(function (item, index) {\n  return {\n    labeled: item.labeled,\n    href: item.href,\n    key: item.key,\n    why: item.why,\n    index: index\n  };\n}).filter(function (item) {\n  return !item.labeled;\n});\n\n//\n// Lots of sideeffects :)\n//\nvar OPEN_FLAG = false;\nvar SKIPS = 0;\nvar SOURCES = {};\n\nfunction Logic(ws) {\n  this.ws = ws;\n}\nmodule.exports = Logic;\n\nLogic.prototype.send = function (msg) {\n  this.ws.send(JSON.stringify(msg));\n};\n\nLogic.prototype._requestLabel = function () {\n  var self = this;\n\n  if (UNLABLED.length <= SKIPS) {\n    this.send({ 'what': 'done', 'data': SKIPS });\n  } else {\n    var item = UNLABLED[SKIPS];\n    this.send({ 'what': 'label-processing', 'data': item });\n\n    this._analyse(item, function (err, result) {\n      if (err) return self.send({ 'what': 'error', 'data': err.message });\n\n      self.send({ 'what': 'label-analysed', 'data': result });\n    });\n  }\n};\n\nLogic.prototype._analyse = function (item, callback) {\n  request({url: item.href, jar: true}, function (err, res, body) {\n    if (err) return callback(err);\n    if (res.statusCode !== 200) return callback(new Error('Status code was ' + res.statusCode));\n    if (body.length === 0) return callback(new Error('No body was send'));\n\n    SOURCES[item.key] = body;\n    startpoint(body).pipe(analyse(item.href, callback));\n  });\n};\n\nLogic.prototype.open = function () {\n  if (OPEN_FLAG === true) {\n    this.send({ 'what': 'error', 'data': 'already open' });\n  } else {\n    OPEN_FLAG = true;\n    this._requestLabel();\n  }\n};\n\nLogic.prototype.close = function () {\n  OPEN_FLAG = false;\n};\n\nvar HANDLERS = {\n  skip: function (item) {\n    SKIPS += 1;\n    delete SOURCES[item.key];\n    this._requestLabel();\n  },\n\n  save: function (item) {\n    var self = this;\n\n    this.send({ 'what': 'label-saving' });\n\n    async.series([\n      // Save expected file\n      function (done) {\n        fs.writeFile(\n          path.resolve(__dirname, '../../test/reallife/expected/' + item.key + '.json'),\n          JSON.stringify({\n            'title': item.title,\n            'text': item.text\n          }, null, '\\t') + '\\n',\n          done\n        );\n      },\n\n      // Save source file\n      function (done) {\n        fs.writeFile(\n          path.resolve(__dirname, '../../test/reallife/source/' + item.key + '.html'),\n          SOURCES[item.key],\n          done\n        );\n      },\n\n      // Save labeled flag\n      function (done) {\n        datamap[item.index].labeled = true;\n\n        fs.writeFile(\n          path.resolve(__dirname, '../../test/reallife/datamap.json'),\n          JSON.stringify(datamap, null, '\\t') + '\\n',\n          done\n        );\n      }\n    ], function (err) {\n      if (err) return self.send({ 'what': 'error', 'data': err.message });\n\n      // Cleanup memory\n      delete SOURCES[item.key];\n      UNLABLED.splice(SKIPS, 1);\n\n      self._requestLabel();\n    });\n  }\n};\n\nLogic.prototype.message = function (msg) {\n  if (HANDLERS.hasOwnProperty(msg.what) === false) {\n    this.send({ 'what': 'error', 'data': 'no such command' });\n  } else {\n    HANDLERS[msg.what].call(this, msg.data);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-article/node_modules/article/tools/overview/index.js":"\nvar fs = require('fs');\nvar path = require('path');\nvar http = require('http');\n\nvar server = http.createServer();\n\nserver.listen(9200, '127.0.0.1', function () {\n  console.log('analyse server ready on http://localhost:9200');\n});\n\nvar datamap = require('../../test/reallife/datamap.json');\n\nfunction stateContext(state, value) {\n  var str = '';\n  if (state[0] === value) str += 'Title ';\n  if (state[1] === value) str += 'Text ';\n  if (state[2] === value) str += 'Image ';\n  return str;\n}\nfunction sumContext(sum, name) {\n  var state = sum[name];\n  var str = '';\n  \n  str += '<tr>';\n  str += '<td>' + name + ':</td>';\n  str += '<td>' + state[0] + '</td>';\n  str += '<td>' + state[1] + '</td>';\n  str += '<td>' + state[2] + '</td>';\n  str += '<td>' + state[3] + '</td>';\n  str += '<td>' + state[4] + '</td>';\n  str += '</tr>';\n  return str;\n}\n\nvar stylesheet = fs.readFileSync(path.resolve(__dirname, 'style.css'));\n\n// Just serve static files\nserver.on('request', function (req, res) {\n  res.writeHead(200, {'Content-Type': 'text/html'});\n  res.write('<title>Overview</title>\\n');\n\n  res.write('<style>\\n');\n  res.write(stylesheet);\n  res.write('</style>\\n');\n\n  res.write('<table>\\n');\n\n  res.write('\\t<thead>\\n');\n  res.write('\\t\\t<tr><th>Identifier</th><th>Unknown</th><th>Wrong</th><th>Bad</th><th>Good</th><th>Perfect</th></tr>\\n');  \n  res.write('\\t</thead>\\n');\n  \n  var sum = {\n    Title: [0,0,0,0,0],\n    Text: [0,0,0,0,0],\n    Image: [0,0,0,0,0]\n  };\n\n  res.write('\\t<tbody>');\n  datamap.forEach(function (item) {\n    var state = (item.state || '0-0-0').split('-').map(Number);\n\n    sum.Title[state[0]] += 1;\n    sum.Text[state[1]] += 1;\n    sum.Image[state[2]] += 1;\n\n    res.write('\\t\\t<tr>');\n    res.write('<td>' + item.key + '</td>');\n    res.write('<td>' + stateContext(state, 0) + '</td>');\n    res.write('<td>' + stateContext(state, 1) + '</td>');\n    res.write('<td>' + stateContext(state, 2) + '</td>');\n    res.write('<td>' + stateContext(state, 3) + '</td>');\n    res.write('<td>' + stateContext(state, 4) + '</td>');\n    res.write('</tr>\\n');\n  });\n  res.write('\\t</tbody>\\n');\n\n  res.write('\\t<thead>\\n');\n  res.write('\\t\\t<tr><th>Identifier</th><th>Unknown</th><th>Wrong</th><th>Bad</th><th>Good</th><th>Perfect</th></tr>\\n');  \n  res.write('\\t</thead>\\n');\n\n  res.write('\\t<tfoot>\\n');\n  res.write('\\t\\t' + sumContext(sum, 'Title') + '\\n');\n  res.write('\\t\\t' + sumContext(sum, 'Text') + '\\n');\n  res.write('\\t\\t' + sumContext(sum, 'Image') + '\\n');\n  res.write('\\t</tfoot>\\n');\n  \n  res.write('</table>\\n');\n  res.end();\n});\n","/home/travis/build/npmtest/node-npmtest-article/node_modules/article/tools/analyse/static/diff.js":"/**\n * Diff Match and Patch\n *\n * Copyright 2006 Google Inc.\n * http://code.google.com/p/google-diff-match-patch/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n */\n\n/**\n * Class containing the diff, match and patch methods.\n * @constructor\n */\nfunction diff_match_patch() {\n\n  // Defaults.\n  // Redefine these in your program to override the defaults.\n\n  // Number of seconds to map a diff before giving up (0 for infinity).\n  this.Diff_Timeout = 1.0;\n  // Cost of an empty edit operation in terms of edit characters.\n  this.Diff_EditCost = 4;\n  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n  this.Match_Threshold = 0.5;\n  // How far to search for a match (0 = exact location, 1000+ = broad match).\n  // A match this many characters away from the expected location will add\n  // 1.0 to the score (0.0 is a perfect match).\n  this.Match_Distance = 1000;\n  // When deleting a large block of text (over ~64 characters), how close do\n  // the contents have to be to match the expected contents. (0.0 = perfection,\n  // 1.0 = very loose).  Note that Match_Threshold controls how closely the\n  // end points of a delete need to match.\n  this.Patch_DeleteThreshold = 0.5;\n  // Chunk size for context length.\n  this.Patch_Margin = 4;\n\n  // The number of bits in an int.\n  this.Match_MaxBits = 32;\n}\n\n\n//  DIFF FUNCTIONS\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n/** @typedef {{0: number, 1: string}} */\ndiff_match_patch.Diff;\n\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\n *     then don't run a line-level diff first to identify the changed areas.\n *     Defaults to true, which does a faster, slightly less optimal diff.\n * @param {number} opt_deadline Optional time when the diff should be complete\n *     by.  Used internally for recursive calls.  Users should set DiffTimeout\n *     instead.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines,\n    opt_deadline) {\n  // Set a deadline by which time the diff must be complete.\n  if (typeof opt_deadline == 'undefined') {\n    if (this.Diff_Timeout <= 0) {\n      opt_deadline = Number.MAX_VALUE;\n    } else {\n      opt_deadline = (new Date).getTime() + this.Diff_Timeout * 1000;\n    }\n  }\n  var deadline = opt_deadline;\n\n  // Check for null inputs.\n  if (text1 == null || text2 == null) {\n    throw new Error('Null input. (diff_main)');\n  }\n\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [[DIFF_EQUAL, text1]];\n    }\n    return [];\n  }\n\n  if (typeof opt_checklines == 'undefined') {\n    opt_checklines = true;\n  }\n  var checklines = opt_checklines;\n\n  // Trim off common prefix (speedup).\n  var commonlength = this.diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = this.diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = this.diff_compute_(text1, text2, checklines, deadline);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  this.diff_cleanupMerge(diffs);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean} checklines Speedup flag.  If false, then don't run a\n *     line-level diff first to identify the changed areas.\n *     If true, then run a faster, slightly less optimal diff.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_compute_ = function(text1, text2, checklines,\n    deadline) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [[DIFF_INSERT, text2]];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [[DIFF_DELETE, text1]];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)],\n             [DIFF_EQUAL, shorttext],\n             [DIFF_INSERT, longtext.substring(i + shorttext.length)]];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = this.diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);\n    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);\n    // Merge the results.\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n  }\n\n  if (checklines && text1.length > 100 && text2.length > 100) {\n    return this.diff_lineMode_(text1, text2, deadline);\n  }\n\n  return this.diff_bisect_(text1, text2, deadline);\n};\n\n\n/**\n * Do a quick line-level diff on both strings, then rediff the parts for\n * greater accuracy.\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {\n  // Scan the text on a line-by-line basis first.\n  var a = this.diff_linesToChars_(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  var linearray = a.lineArray;\n\n  var diffs = this.diff_main(text1, text2, false, deadline);\n\n  // Convert the diff back to original text.\n  this.diff_charsToLines_(diffs, linearray);\n  // Eliminate freak matches (e.g. blank lines)\n  this.diff_cleanupSemantic(diffs);\n\n  // Rediff any replacement blocks, this time character-by-character.\n  // Add a dummy entry at the end.\n  diffs.push([DIFF_EQUAL, '']);\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete >= 1 && count_insert >= 1) {\n          // Delete the offending records and add the merged ones.\n          diffs.splice(pointer - count_delete - count_insert,\n                       count_delete + count_insert);\n          pointer = pointer - count_delete - count_insert;\n          var a = this.diff_main(text_delete, text_insert, false, deadline);\n          for (var j = a.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, a[j]);\n          }\n          pointer = pointer + a.length;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n    pointer++;\n  }\n  diffs.pop();  // Remove the dummy entry at the end.\n\n  return diffs;\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 != 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Bail out if deadline is reached.\n    if ((new Date()).getTime() > deadline) {\n      break;\n    }\n\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length &&\n             text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length &&\n             text1.charAt(text1_length - x2 - 1) ==\n             text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisectSplit_ = function(text1, text2, x, y,\n    deadline) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = this.diff_main(text1a, text2a, false, deadline);\n  var diffsb = this.diff_main(text1b, text2b, false, deadline);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Split two texts into an array of strings.  Reduce the texts to a string of\n * hashes where each Unicode character represents one line.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n *     An object containing the encoded text1, the encoded text2 and\n *     the array of unique strings.\n *     The zeroth element of the array of unique strings is intentionally blank.\n * @private\n */\ndiff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {\n  var lineArray = [];  // e.g. lineArray[4] == 'Hello\\n'\n  var lineHash = {};   // e.g. lineHash['Hello\\n'] == 4\n\n  // '\\x00' is a valid character, but various debuggers don't like it.\n  // So we'll insert a junk entry to avoid generating a null character.\n  lineArray[0] = '';\n\n  /**\n   * Split a text into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * Modifies linearray and linehash through being a closure.\n   * @param {string} text String to encode.\n   * @return {string} Encoded string.\n   * @private\n   */\n  function diff_linesToCharsMunge_(text) {\n    var chars = '';\n    // Walk the text, pulling out a substring for each line.\n    // text.split('\\n') would would temporarily double our memory footprint.\n    // Modifying text would create many large strings to garbage collect.\n    var lineStart = 0;\n    var lineEnd = -1;\n    // Keeping our own length variable is faster than looking it up.\n    var lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf('\\n', lineStart);\n      if (lineEnd == -1) {\n        lineEnd = text.length - 1;\n      }\n      var line = text.substring(lineStart, lineEnd + 1);\n      lineStart = lineEnd + 1;\n\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :\n          (lineHash[line] !== undefined)) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n    }\n    return chars;\n  }\n\n  var chars1 = diff_linesToCharsMunge_(text1);\n  var chars2 = diff_linesToCharsMunge_(text2);\n  return {chars1: chars1, chars2: chars2, lineArray: lineArray};\n};\n\n\n/**\n * Rehydrate the text in a diff from a string of line hashes to real lines of\n * text.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {!Array.<string>} lineArray Array of unique strings.\n * @private\n */\ndiff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {\n  for (var x = 0; x < diffs.length; x++) {\n    var chars = diffs[x][1];\n    var text = [];\n    for (var y = 0; y < chars.length; y++) {\n      text[y] = lineArray[chars.charCodeAt(y)];\n    }\n    diffs[x][1] = text.join('');\n  }\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\ndiff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) ==\n        text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\ndiff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 ||\n      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine if the suffix of one string is the prefix of another.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of the first\n *     string and the start of the second string.\n * @private\n */\ndiff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  // Eliminate the null case.\n  if (text1_length == 0 || text2_length == 0) {\n    return 0;\n  }\n  // Truncate the longer string.\n  if (text1_length > text2_length) {\n    text1 = text1.substring(text1_length - text2_length);\n  } else if (text1_length < text2_length) {\n    text2 = text2.substring(0, text1_length);\n  }\n  var text_length = Math.min(text1_length, text2_length);\n  // Quick check for the worst case.\n  if (text1 == text2) {\n    return text_length;\n  }\n\n  // Start by looking for a single character match\n  // and increase length until no match is found.\n  // Performance analysis: http://neil.fraser.name/news/2010/11/04/\n  var best = 0;\n  var length = 1;\n  while (true) {\n    var pattern = text1.substring(text_length - length);\n    var found = text2.indexOf(pattern);\n    if (found == -1) {\n      return best;\n    }\n    length += found;\n    if (found == 0 || text1.substring(text_length - length) ==\n        text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n * @private\n */\ndiff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {\n  if (this.Diff_Timeout <= 0) {\n    // Don't risk returning a non-optimal diff if we have unlimited time.\n    return null;\n  }\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = dmp.diff_commonPrefix(longtext.substring(i),\n                                               shorttext.substring(j));\n      var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),\n                                               shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) +\n            shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b,\n              best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reduce the number of edits by eliminating semantically trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastequality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Number of characters that changed prior to the equality.\n  var length_insertions1 = 0;\n  var length_deletions1 = 0;\n  // Number of characters that changed after the equality.\n  var length_insertions2 = 0;\n  var length_deletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      equalities[equalitiesLength++] = pointer;\n      length_insertions1 = length_insertions2;\n      length_deletions1 = length_deletions2;\n      length_insertions2 = 0;\n      length_deletions2 = 0;\n      lastequality = diffs[pointer][1];\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_INSERT) {\n        length_insertions2 += diffs[pointer][1].length;\n      } else {\n        length_deletions2 += diffs[pointer][1].length;\n      }\n      // Eliminate an equality that is smaller or equal to the edits on both\n      // sides of it.\n      if (lastequality && (lastequality.length <=\n          Math.max(length_insertions1, length_deletions1)) &&\n          (lastequality.length <= Math.max(length_insertions2,\n                                           length_deletions2))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     [DIFF_DELETE, lastequality]);\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        // Throw away the equality we just deleted.\n        equalitiesLength--;\n        // Throw away the previous equality (it needs to be reevaluated).\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        length_insertions1 = 0;  // Reset the counters.\n        length_deletions1 = 0;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastequality = null;\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  // Normalize the diff.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n  this.diff_cleanupSemanticLossless(diffs);\n\n  // Find any overlaps between deletions and insertions.\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n  //   -> <del>abc</del>xxx<ins>def</ins>\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\n  //   -> <ins>def</ins>xxx<del>abc</del>\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] == DIFF_DELETE &&\n        diffs[pointer][0] == DIFF_INSERT) {\n      var deletion = diffs[pointer - 1][1];\n      var insertion = diffs[pointer][1];\n      var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);\n      var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);\n      if (overlap_length1 >= overlap_length2) {\n        if (overlap_length1 >= deletion.length / 2 ||\n            overlap_length1 >= insertion.length / 2) {\n          // Overlap found.  Insert an equality and trim the surrounding edits.\n          diffs.splice(pointer, 0,\n              [DIFF_EQUAL, insertion.substring(0, overlap_length1)]);\n          diffs[pointer - 1][1] =\n              deletion.substring(0, deletion.length - overlap_length1);\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n          pointer++;\n        }\n      } else {\n        if (overlap_length2 >= deletion.length / 2 ||\n            overlap_length2 >= insertion.length / 2) {\n          // Reverse overlap found.\n          // Insert an equality and swap and trim the surrounding edits.\n          diffs.splice(pointer, 0,\n              [DIFF_EQUAL, deletion.substring(0, overlap_length2)]);\n          diffs[pointer - 1][0] = DIFF_INSERT;\n          diffs[pointer - 1][1] =\n              insertion.substring(0, insertion.length - overlap_length2);\n          diffs[pointer + 1][0] = DIFF_DELETE;\n          diffs[pointer + 1][1] =\n              deletion.substring(overlap_length2);\n          pointer++;\n        }\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n};\n\n\n/**\n * Look for single edits surrounded on both sides by equalities\n * which can be shifted sideways to align the edit to a word boundary.\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {\n  /**\n   * Given two strings, compute a score representing whether the internal\n   * boundary falls on logical boundaries.\n   * Scores range from 6 (best) to 0 (worst).\n   * Closure, but does not reference any external variables.\n   * @param {string} one First string.\n   * @param {string} two Second string.\n   * @return {number} The score.\n   * @private\n   */\n  function diff_cleanupSemanticScore_(one, two) {\n    if (!one || !two) {\n      // Edges are the best.\n      return 6;\n    }\n\n    // Each port of this function behaves slightly differently due to\n    // subtle differences in each language's definition of things like\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\n    // the choice has been made to use each language's native features\n    // rather than force total conformity.\n    var char1 = one.charAt(one.length - 1);\n    var char2 = two.charAt(0);\n    var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);\n    var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);\n    var whitespace1 = nonAlphaNumeric1 &&\n        char1.match(diff_match_patch.whitespaceRegex_);\n    var whitespace2 = nonAlphaNumeric2 &&\n        char2.match(diff_match_patch.whitespaceRegex_);\n    var lineBreak1 = whitespace1 &&\n        char1.match(diff_match_patch.linebreakRegex_);\n    var lineBreak2 = whitespace2 &&\n        char2.match(diff_match_patch.linebreakRegex_);\n    var blankLine1 = lineBreak1 &&\n        one.match(diff_match_patch.blanklineEndRegex_);\n    var blankLine2 = lineBreak2 &&\n        two.match(diff_match_patch.blanklineStartRegex_);\n\n    if (blankLine1 || blankLine2) {\n      // Five points for blank lines.\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      // Four points for line breaks.\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      // Three points for end of sentences.\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      // Two points for whitespace.\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      // One point for non-alphanumeric.\n      return 1;\n    }\n    return 0;\n  }\n\n  var pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      var equality1 = diffs[pointer - 1][1];\n      var edit = diffs[pointer][1];\n      var equality2 = diffs[pointer + 1][1];\n\n      // First, shift the edit as far left as possible.\n      var commonOffset = this.diff_commonSuffix(equality1, edit);\n      if (commonOffset) {\n        var commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n\n      // Second, step character by character right, looking for the best fit.\n      var bestEquality1 = equality1;\n      var bestEdit = edit;\n      var bestEquality2 = equality2;\n      var bestScore = diff_cleanupSemanticScore_(equality1, edit) +\n          diff_cleanupSemanticScore_(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        var score = diff_cleanupSemanticScore_(equality1, edit) +\n            diff_cleanupSemanticScore_(edit, equality2);\n        // The >= encourages trailing rather than leading whitespace on edits.\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n\n      if (diffs[pointer - 1][1] != bestEquality1) {\n        // We have an improvement, save it back to the diff.\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n};\n\n// Define some regex patterns for matching boundaries.\ndiff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\ndiff_match_patch.whitespaceRegex_ = /\\s/;\ndiff_match_patch.linebreakRegex_ = /[\\r\\n]/;\ndiff_match_patch.blanklineEndRegex_ = /\\n\\r?\\n$/;\ndiff_match_patch.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n\n/**\n * Reduce the number of edits by eliminating operationally trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastequality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Is there an insertion operation before the last equality.\n  var pre_ins = false;\n  // Is there a deletion operation before the last equality.\n  var pre_del = false;\n  // Is there an insertion operation after the last equality.\n  var post_ins = false;\n  // Is there a deletion operation after the last equality.\n  var post_del = false;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      if (diffs[pointer][1].length < this.Diff_EditCost &&\n          (post_ins || post_del)) {\n        // Candidate found.\n        equalities[equalitiesLength++] = pointer;\n        pre_ins = post_ins;\n        pre_del = post_del;\n        lastequality = diffs[pointer][1];\n      } else {\n        // Not a candidate, and can never become one.\n        equalitiesLength = 0;\n        lastequality = null;\n      }\n      post_ins = post_del = false;\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_DELETE) {\n        post_del = true;\n      } else {\n        post_ins = true;\n      }\n      /*\n       * Five types to be split:\n       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n       * <ins>A</ins>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<ins>C</ins>\n       * <ins>A</del>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<del>C</del>\n       */\n      if (lastequality && ((pre_ins && pre_del && post_ins && post_del) ||\n                           ((lastequality.length < this.Diff_EditCost / 2) &&\n                            (pre_ins + pre_del + post_ins + post_del) == 3))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     [DIFF_DELETE, lastequality]);\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;  // Throw away the equality we just deleted;\n        lastequality = null;\n        if (pre_ins && pre_del) {\n          // No changes made which could affect previous entry, keep going.\n          post_ins = post_del = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--;  // Throw away the previous equality.\n          pointer = equalitiesLength > 0 ?\n              equalities[equalitiesLength - 1] : -1;\n          post_ins = post_del = false;\n        }\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupMerge = function(diffs) {\n  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = this.diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if ((pointer - count_delete - count_insert) > 0 &&\n                  diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] +=\n                    text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL,\n                                    text_insert.substring(0, commonlength)]);\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = this.diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length -\n                  commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length -\n                  commonlength);\n              text_delete = text_delete.substring(0, text_delete.length -\n                  commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          if (count_delete === 0) {\n            diffs.splice(pointer - count_insert,\n                count_delete + count_insert, [DIFF_INSERT, text_insert]);\n          } else if (count_insert === 0) {\n            diffs.splice(pointer - count_delete,\n                count_delete + count_insert, [DIFF_DELETE, text_delete]);\n          } else {\n            diffs.splice(pointer - count_delete - count_insert,\n                count_delete + count_insert, [DIFF_DELETE, text_delete],\n                [DIFF_INSERT, text_insert]);\n          }\n          pointer = pointer - count_delete - count_insert +\n                    (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n            diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                        diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n          diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n            diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * loc is a location in text1, compute and return the equivalent location in\n * text2.\n * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {number} loc Location within text1.\n * @return {number} Location within text2.\n */\ndiff_match_patch.prototype.diff_xIndex = function(diffs, loc) {\n  var chars1 = 0;\n  var chars2 = 0;\n  var last_chars1 = 0;\n  var last_chars2 = 0;\n  var x;\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {  // Equality or deletion.\n      chars1 += diffs[x][1].length;\n    }\n    if (diffs[x][0] !== DIFF_DELETE) {  // Equality or insertion.\n      chars2 += diffs[x][1].length;\n    }\n    if (chars1 > loc) {  // Overshot the location.\n      break;\n    }\n    last_chars1 = chars1;\n    last_chars2 = chars2;\n  }\n  // Was the location was deleted?\n  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {\n    return last_chars2;\n  }\n  // Add the remaining character length.\n  return last_chars2 + (loc - last_chars1);\n};\n\n\n/**\n * Convert a diff array into a pretty HTML report.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} HTML representation.\n */\ndiff_match_patch.prototype.diff_prettyHtml = function(diffs) {\n  var html = [];\n  var pattern_amp = /&/g;\n  var pattern_lt = /</g;\n  var pattern_gt = />/g;\n  var pattern_para = /\\n/g;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];    // Operation (insert, delete, equal)\n    var data = diffs[x][1];  // Text of change.\n    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')\n        .replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');\n    switch (op) {\n      case DIFF_INSERT:\n        html[x] = '<ins style=\"background:#e6ffe6;\">' + text + '</ins>';\n        break;\n      case DIFF_DELETE:\n        html[x] = '<del style=\"background:#ffe6e6;\">' + text + '</del>';\n        break;\n      case DIFF_EQUAL:\n        html[x] = '<span>' + text + '</span>';\n        break;\n    }\n  }\n  return html.join('');\n};\n\n\n/**\n * Compute and return the source text (all equalities and deletions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Source text.\n */\ndiff_match_patch.prototype.diff_text1 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute and return the destination text (all equalities and insertions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Destination text.\n */\ndiff_match_patch.prototype.diff_text2 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute the Levenshtein distance; the number of inserted, deleted or\n * substituted characters.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {number} Number of changes.\n */\ndiff_match_patch.prototype.diff_levenshtein = function(diffs) {\n  var levenshtein = 0;\n  var insertions = 0;\n  var deletions = 0;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];\n    var data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        // A deletion and an insertion is one substitution.\n        levenshtein += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n    }\n  }\n  levenshtein += Math.max(insertions, deletions);\n  return levenshtein;\n};\n\n\n/**\n * Crush the diff into an encoded string which describes the operations\n * required to transform text1 into text2.\n * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\n * Operations are tab-separated.  Inserted text is escaped using %xx notation.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Delta text.\n */\ndiff_match_patch.prototype.diff_toDelta = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        text[x] = '+' + encodeURI(diffs[x][1]);\n        break;\n      case DIFF_DELETE:\n        text[x] = '-' + diffs[x][1].length;\n        break;\n      case DIFF_EQUAL:\n        text[x] = '=' + diffs[x][1].length;\n        break;\n    }\n  }\n  return text.join('\\t').replace(/%20/g, ' ');\n};\n\n\n/**\n * Given the original text1, and an encoded string which describes the\n * operations required to transform text1 into text2, compute the full diff.\n * @param {string} text1 Source string for the diff.\n * @param {string} delta Delta text.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.diff_fromDelta = function(text1, delta) {\n  var diffs = [];\n  var diffsLength = 0;  // Keeping our own length var is faster in JS.\n  var pointer = 0;  // Cursor in text1\n  var tokens = delta.split(/\\t/g);\n  for (var x = 0; x < tokens.length; x++) {\n    // Each token begins with a one character parameter which specifies the\n    // operation of this token (delete, insert, equality).\n    var param = tokens[x].substring(1);\n    switch (tokens[x].charAt(0)) {\n      case '+':\n        try {\n          diffs[diffsLength++] = [DIFF_INSERT, decodeURI(param)];\n        } catch (ex) {\n          // Malformed URI sequence.\n          throw new Error('Illegal escape in diff_fromDelta: ' + param);\n        }\n        break;\n      case '-':\n        // Fall through.\n      case '=':\n        var n = parseInt(param, 10);\n        if (isNaN(n) || n < 0) {\n          throw new Error('Invalid number in diff_fromDelta: ' + param);\n        }\n        var text = text1.substring(pointer, pointer += n);\n        if (tokens[x].charAt(0) == '=') {\n          diffs[diffsLength++] = [DIFF_EQUAL, text];\n        } else {\n          diffs[diffsLength++] = [DIFF_DELETE, text];\n        }\n        break;\n      default:\n        // Blank tokens are ok (from a trailing \\t).\n        // Anything else is an error.\n        if (tokens[x]) {\n          throw new Error('Invalid diff operation in diff_fromDelta: ' +\n                          tokens[x]);\n        }\n    }\n  }\n  if (pointer != text1.length) {\n    throw new Error('Delta length (' + pointer +\n        ') does not equal source text length (' + text1.length + ').');\n  }\n  return diffs;\n};\n\n\n//  MATCH FUNCTIONS\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc'.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n */\ndiff_match_patch.prototype.match_main = function(text, pattern, loc) {\n  // Check for null inputs.\n  if (text == null || pattern == null || loc == null) {\n    throw new Error('Null input. (match_main)');\n  }\n\n  loc = Math.max(0, Math.min(loc, text.length));\n  if (text == pattern) {\n    // Shortcut (potentially not guaranteed by the algorithm)\n    return 0;\n  } else if (!text.length) {\n    // Nothing to match.\n    return -1;\n  } else if (text.substring(loc, loc + pattern.length) == pattern) {\n    // Perfect match at the perfect spot!  (Includes case of null pattern)\n    return loc;\n  } else {\n    // Do a fuzzy compare.\n    return this.match_bitap_(text, pattern, loc);\n  }\n};\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc' using the\n * Bitap algorithm.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n * @private\n */\ndiff_match_patch.prototype.match_bitap_ = function(text, pattern, loc) {\n  if (pattern.length > this.Match_MaxBits) {\n    throw new Error('Pattern too long for this browser.');\n  }\n\n  // Initialise the alphabet.\n  var s = this.match_alphabet_(pattern);\n\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Compute and return the score for a match with e errors and x location.\n   * Accesses loc and pattern through being a closure.\n   * @param {number} e Number of errors in match.\n   * @param {number} x Location of match.\n   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).\n   * @private\n   */\n  function match_bitapScore_(e, x) {\n    var accuracy = e / pattern.length;\n    var proximity = Math.abs(loc - x);\n    if (!dmp.Match_Distance) {\n      // Dodge divide by zero error.\n      return proximity ? 1.0 : accuracy;\n    }\n    return accuracy + (proximity / dmp.Match_Distance);\n  }\n\n  // Highest score beyond which we give up.\n  var score_threshold = this.Match_Threshold;\n  // Is there a nearby exact match? (speedup)\n  var best_loc = text.indexOf(pattern, loc);\n  if (best_loc != -1) {\n    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    // What about in the other direction? (speedup)\n    best_loc = text.lastIndexOf(pattern, loc + pattern.length);\n    if (best_loc != -1) {\n      score_threshold =\n          Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    }\n  }\n\n  // Initialise the bit arrays.\n  var matchmask = 1 << (pattern.length - 1);\n  best_loc = -1;\n\n  var bin_min, bin_mid;\n  var bin_max = pattern.length + text.length;\n  var last_rd;\n  for (var d = 0; d < pattern.length; d++) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from 'loc' we can stray at this\n    // error level.\n    bin_min = 0;\n    bin_mid = bin_max;\n    while (bin_min < bin_mid) {\n      if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\n        bin_min = bin_mid;\n      } else {\n        bin_max = bin_mid;\n      }\n      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\n    }\n    // Use the result from this iteration as the maximum for the next.\n    bin_max = bin_mid;\n    var start = Math.max(1, loc - bin_mid + 1);\n    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;\n\n    var rd = Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (var j = finish; j >= start; j--) {\n      // The alphabet (s) is a sparse hash, so the following line generates\n      // warnings.\n      var charMatch = s[text.charAt(j - 1)];\n      if (d === 0) {  // First pass: exact match.\n        rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\n      } else {  // Subsequent passes: fuzzy match.\n        rd[j] = (((rd[j + 1] << 1) | 1) & charMatch) |\n                (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |\n                last_rd[j + 1];\n      }\n      if (rd[j] & matchmask) {\n        var score = match_bitapScore_(d, j - 1);\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (score <= score_threshold) {\n          // Told you so.\n          score_threshold = score;\n          best_loc = j - 1;\n          if (best_loc > loc) {\n            // When passing loc, don't exceed our current distance from loc.\n            start = Math.max(1, 2 * loc - best_loc);\n          } else {\n            // Already passed loc, downhill from here on in.\n            break;\n          }\n        }\n      }\n    }\n    // No hope for a (better) match at greater error levels.\n    if (match_bitapScore_(d + 1, loc) > score_threshold) {\n      break;\n    }\n    last_rd = rd;\n  }\n  return best_loc;\n};\n\n\n/**\n * Initialise the alphabet for the Bitap algorithm.\n * @param {string} pattern The text to encode.\n * @return {!Object} Hash of character locations.\n * @private\n */\ndiff_match_patch.prototype.match_alphabet_ = function(pattern) {\n  var s = {};\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] = 0;\n  }\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);\n  }\n  return s;\n};\n\n\n//  PATCH FUNCTIONS\n\n\n/**\n * Increase the context until it is unique,\n * but don't let the pattern expand beyond Match_MaxBits.\n * @param {!diff_match_patch.patch_obj} patch The patch to grow.\n * @param {string} text Source text.\n * @private\n */\ndiff_match_patch.prototype.patch_addContext_ = function(patch, text) {\n  if (text.length == 0) {\n    return;\n  }\n  var pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n  var padding = 0;\n\n  // Look for the first and last matches of pattern in text.  If two different\n  // matches are found, increase the pattern length.\n  while (text.indexOf(pattern) != text.lastIndexOf(pattern) &&\n         pattern.length < this.Match_MaxBits - this.Patch_Margin -\n         this.Patch_Margin) {\n    padding += this.Patch_Margin;\n    pattern = text.substring(patch.start2 - padding,\n                             patch.start2 + patch.length1 + padding);\n  }\n  // Add one chunk for good luck.\n  padding += this.Patch_Margin;\n\n  // Add the prefix.\n  var prefix = text.substring(patch.start2 - padding, patch.start2);\n  if (prefix) {\n    patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  }\n  // Add the suffix.\n  var suffix = text.substring(patch.start2 + patch.length1,\n                              patch.start2 + patch.length1 + padding);\n  if (suffix) {\n    patch.diffs.push([DIFF_EQUAL, suffix]);\n  }\n\n  // Roll back the start points.\n  patch.start1 -= prefix.length;\n  patch.start2 -= prefix.length;\n  // Extend the lengths.\n  patch.length1 += prefix.length + suffix.length;\n  patch.length2 += prefix.length + suffix.length;\n};\n\n\n/**\n * Compute a list of patches to turn text1 into text2.\n * Use diffs if provided, otherwise compute it ourselves.\n * There are four ways to call this function, depending on what data is\n * available to the caller:\n * Method 1:\n * a = text1, b = text2\n * Method 2:\n * a = diffs\n * Method 3 (optimal):\n * a = text1, b = diffs\n * Method 4 (deprecated, use method 3):\n * a = text1, b = text2, c = diffs\n *\n * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or\n * Array of diff tuples for text1 to text2 (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>} opt_b text2 (methods 1,4) or\n * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>} opt_c Array of diff tuples\n * for text1 to text2 (method 4) or undefined (methods 1,2,3).\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {\n  var text1, diffs;\n  if (typeof a == 'string' && typeof opt_b == 'string' &&\n      typeof opt_c == 'undefined') {\n    // Method 1: text1, text2\n    // Compute diffs from text1 and text2.\n    text1 = /** @type {string} */(a);\n    diffs = this.diff_main(text1, /** @type {string} */(opt_b), true);\n    if (diffs.length > 2) {\n      this.diff_cleanupSemantic(diffs);\n      this.diff_cleanupEfficiency(diffs);\n    }\n  } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' &&\n      typeof opt_c == 'undefined') {\n    // Method 2: diffs\n    // Compute text1 from diffs.\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(a);\n    text1 = this.diff_text1(diffs);\n  } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' &&\n      typeof opt_c == 'undefined') {\n    // Method 3: text1, diffs\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_b);\n  } else if (typeof a == 'string' && typeof opt_b == 'string' &&\n      opt_c && typeof opt_c == 'object') {\n    // Method 4: text1, text2, diffs\n    // text2 is not used.\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_c);\n  } else {\n    throw new Error('Unknown call format to patch_make.');\n  }\n\n  if (diffs.length === 0) {\n    return [];  // Get rid of the null case.\n  }\n  var patches = [];\n  var patch = new diff_match_patch.patch_obj();\n  var patchDiffLength = 0;  // Keeping our own length var is faster in JS.\n  var char_count1 = 0;  // Number of characters into the text1 string.\n  var char_count2 = 0;  // Number of characters into the text2 string.\n  // Start with text1 (prepatch_text) and apply the diffs until we arrive at\n  // text2 (postpatch_text).  We recreate the patches one by one to determine\n  // context info.\n  var prepatch_text = text1;\n  var postpatch_text = text1;\n  for (var x = 0; x < diffs.length; x++) {\n    var diff_type = diffs[x][0];\n    var diff_text = diffs[x][1];\n\n    if (!patchDiffLength && diff_type !== DIFF_EQUAL) {\n      // A new patch starts here.\n      patch.start1 = char_count1;\n      patch.start2 = char_count2;\n    }\n\n    switch (diff_type) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = diffs[x];\n        patch.length2 += diff_text.length;\n        postpatch_text = postpatch_text.substring(0, char_count2) + diff_text +\n                         postpatch_text.substring(char_count2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diff_text.length;\n        patch.diffs[patchDiffLength++] = diffs[x];\n        postpatch_text = postpatch_text.substring(0, char_count2) +\n                         postpatch_text.substring(char_count2 +\n                             diff_text.length);\n        break;\n      case DIFF_EQUAL:\n        if (diff_text.length <= 2 * this.Patch_Margin &&\n            patchDiffLength && diffs.length != x + 1) {\n          // Small equality inside a patch.\n          patch.diffs[patchDiffLength++] = diffs[x];\n          patch.length1 += diff_text.length;\n          patch.length2 += diff_text.length;\n        } else if (diff_text.length >= 2 * this.Patch_Margin) {\n          // Time for a new patch.\n          if (patchDiffLength) {\n            this.patch_addContext_(patch, prepatch_text);\n            patches.push(patch);\n            patch = new diff_match_patch.patch_obj();\n            patchDiffLength = 0;\n            // Unlike Unidiff, our patch lists have a rolling context.\n            // http://code.google.com/p/google-diff-match-patch/wiki/Unidiff\n            // Update prepatch text & pos to reflect the application of the\n            // just completed patch.\n            prepatch_text = postpatch_text;\n            char_count1 = char_count2;\n          }\n        }\n        break;\n    }\n\n    // Update the current character count.\n    if (diff_type !== DIFF_INSERT) {\n      char_count1 += diff_text.length;\n    }\n    if (diff_type !== DIFF_DELETE) {\n      char_count2 += diff_text.length;\n    }\n  }\n  // Pick up the leftover patch if not empty.\n  if (patchDiffLength) {\n    this.patch_addContext_(patch, prepatch_text);\n    patches.push(patch);\n  }\n\n  return patches;\n};\n\n\n/**\n * Given an array of patches, return another array that is identical.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_deepCopy = function(patches) {\n  // Making deep copies is hard in JavaScript.\n  var patchesCopy = [];\n  for (var x = 0; x < patches.length; x++) {\n    var patch = patches[x];\n    var patchCopy = new diff_match_patch.patch_obj();\n    patchCopy.diffs = [];\n    for (var y = 0; y < patch.diffs.length; y++) {\n      patchCopy.diffs[y] = patch.diffs[y].slice();\n    }\n    patchCopy.start1 = patch.start1;\n    patchCopy.start2 = patch.start2;\n    patchCopy.length1 = patch.length1;\n    patchCopy.length2 = patch.length2;\n    patchesCopy[x] = patchCopy;\n  }\n  return patchesCopy;\n};\n\n\n/**\n * Merge a set of patches onto the text.  Return a patched text, as well\n * as a list of true/false values indicating which patches were applied.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @param {string} text Old text.\n * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the\n *      new text and an array of boolean values.\n */\ndiff_match_patch.prototype.patch_apply = function(patches, text) {\n  if (patches.length == 0) {\n    return [text, []];\n  }\n\n  // Deep copy the patches so that no changes are made to originals.\n  patches = this.patch_deepCopy(patches);\n\n  var nullPadding = this.patch_addPadding(patches);\n  text = nullPadding + text + nullPadding;\n\n  this.patch_splitMax(patches);\n  // delta keeps track of the offset between the expected and actual location\n  // of the previous patch.  If there are patches expected at positions 10 and\n  // 20, but the first patch was found at 12, delta is 2 and the second patch\n  // has an effective expected position of 22.\n  var delta = 0;\n  var results = [];\n  for (var x = 0; x < patches.length; x++) {\n    var expected_loc = patches[x].start2 + delta;\n    var text1 = this.diff_text1(patches[x].diffs);\n    var start_loc;\n    var end_loc = -1;\n    if (text1.length > this.Match_MaxBits) {\n      // patch_splitMax will only provide an oversized pattern in the case of\n      // a monster delete.\n      start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits),\n                                  expected_loc);\n      if (start_loc != -1) {\n        end_loc = this.match_main(text,\n            text1.substring(text1.length - this.Match_MaxBits),\n            expected_loc + text1.length - this.Match_MaxBits);\n        if (end_loc == -1 || start_loc >= end_loc) {\n          // Can't find valid trailing context.  Drop this patch.\n          start_loc = -1;\n        }\n      }\n    } else {\n      start_loc = this.match_main(text, text1, expected_loc);\n    }\n    if (start_loc == -1) {\n      // No match found.  :(\n      results[x] = false;\n      // Subtract the delta for this failed patch from subsequent patches.\n      delta -= patches[x].length2 - patches[x].length1;\n    } else {\n      // Found a match.  :)\n      results[x] = true;\n      delta = start_loc - expected_loc;\n      var text2;\n      if (end_loc == -1) {\n        text2 = text.substring(start_loc, start_loc + text1.length);\n      } else {\n        text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);\n      }\n      if (text1 == text2) {\n        // Perfect match, just shove the replacement text in.\n        text = text.substring(0, start_loc) +\n               this.diff_text2(patches[x].diffs) +\n               text.substring(start_loc + text1.length);\n      } else {\n        // Imperfect match.  Run a diff to get a framework of equivalent\n        // indices.\n        var diffs = this.diff_main(text1, text2, false);\n        if (text1.length > this.Match_MaxBits &&\n            this.diff_levenshtein(diffs) / text1.length >\n            this.Patch_DeleteThreshold) {\n          // The end points match, but the content is unacceptably bad.\n          results[x] = false;\n        } else {\n          this.diff_cleanupSemanticLossless(diffs);\n          var index1 = 0;\n          var index2;\n          for (var y = 0; y < patches[x].diffs.length; y++) {\n            var mod = patches[x].diffs[y];\n            if (mod[0] !== DIFF_EQUAL) {\n              index2 = this.diff_xIndex(diffs, index1);\n            }\n            if (mod[0] === DIFF_INSERT) {  // Insertion\n              text = text.substring(0, start_loc + index2) + mod[1] +\n                     text.substring(start_loc + index2);\n            } else if (mod[0] === DIFF_DELETE) {  // Deletion\n              text = text.substring(0, start_loc + index2) +\n                     text.substring(start_loc + this.diff_xIndex(diffs,\n                         index1 + mod[1].length));\n            }\n            if (mod[0] !== DIFF_DELETE) {\n              index1 += mod[1].length;\n            }\n          }\n        }\n      }\n    }\n  }\n  // Strip the padding off.\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\n  return [text, results];\n};\n\n\n/**\n * Add some padding on text start and end so that edges can match something.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} The padding string added to each side.\n */\ndiff_match_patch.prototype.patch_addPadding = function(patches) {\n  var paddingLength = this.Patch_Margin;\n  var nullPadding = '';\n  for (var x = 1; x <= paddingLength; x++) {\n    nullPadding += String.fromCharCode(x);\n  }\n\n  // Bump all the patches forward.\n  for (var x = 0; x < patches.length; x++) {\n    patches[x].start1 += paddingLength;\n    patches[x].start2 += paddingLength;\n  }\n\n  // Add some padding on start of first diff.\n  var patch = patches[0];\n  var diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.unshift([DIFF_EQUAL, nullPadding]);\n    patch.start1 -= paddingLength;  // Should be 0.\n    patch.start2 -= paddingLength;  // Should be 0.\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[0][1].length) {\n    // Grow first equality.\n    var extraLength = paddingLength - diffs[0][1].length;\n    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];\n    patch.start1 -= extraLength;\n    patch.start2 -= extraLength;\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  // Add some padding on end of last diff.\n  patch = patches[patches.length - 1];\n  diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.push([DIFF_EQUAL, nullPadding]);\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    // Grow last equality.\n    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  return nullPadding;\n};\n\n\n/**\n * Look through the patches and break up any which are longer than the maximum\n * limit of the match algorithm.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_splitMax = function(patches) {\n  var patch_size = this.Match_MaxBits;\n  for (var x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patch_size) {\n      continue;\n    }\n    var bigpatch = patches[x];\n    // Remove the big old patch.\n    patches.splice(x--, 1);\n    var start1 = bigpatch.start1;\n    var start2 = bigpatch.start2;\n    var precontext = '';\n    while (bigpatch.diffs.length !== 0) {\n      // Create one of several smaller patches.\n      var patch = new diff_match_patch.patch_obj();\n      var empty = true;\n      patch.start1 = start1 - precontext.length;\n      patch.start2 = start2 - precontext.length;\n      if (precontext !== '') {\n        patch.length1 = patch.length2 = precontext.length;\n        patch.diffs.push([DIFF_EQUAL, precontext]);\n      }\n      while (bigpatch.diffs.length !== 0 &&\n             patch.length1 < patch_size - this.Patch_Margin) {\n        var diff_type = bigpatch.diffs[0][0];\n        var diff_text = bigpatch.diffs[0][1];\n        if (diff_type === DIFF_INSERT) {\n          // Insertions are harmless.\n          patch.length2 += diff_text.length;\n          start2 += diff_text.length;\n          patch.diffs.push(bigpatch.diffs.shift());\n          empty = false;\n        } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 &&\n                   patch.diffs[0][0] == DIFF_EQUAL &&\n                   diff_text.length > 2 * patch_size) {\n          // This is a large deletion.  Let it pass in one chunk.\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          empty = false;\n          patch.diffs.push([diff_type, diff_text]);\n          bigpatch.diffs.shift();\n        } else {\n          // Deletion or equality.  Only take as much as we can stomach.\n          diff_text = diff_text.substring(0,\n              patch_size - patch.length1 - this.Patch_Margin);\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          if (diff_type === DIFF_EQUAL) {\n            patch.length2 += diff_text.length;\n            start2 += diff_text.length;\n          } else {\n            empty = false;\n          }\n          patch.diffs.push([diff_type, diff_text]);\n          if (diff_text == bigpatch.diffs[0][1]) {\n            bigpatch.diffs.shift();\n          } else {\n            bigpatch.diffs[0][1] =\n                bigpatch.diffs[0][1].substring(diff_text.length);\n          }\n        }\n      }\n      // Compute the head context for the next patch.\n      precontext = this.diff_text2(patch.diffs);\n      precontext =\n          precontext.substring(precontext.length - this.Patch_Margin);\n      // Append the end context for this patch.\n      var postcontext = this.diff_text1(bigpatch.diffs)\n                            .substring(0, this.Patch_Margin);\n      if (postcontext !== '') {\n        patch.length1 += postcontext.length;\n        patch.length2 += postcontext.length;\n        if (patch.diffs.length !== 0 &&\n            patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n          patch.diffs[patch.diffs.length - 1][1] += postcontext;\n        } else {\n          patch.diffs.push([DIFF_EQUAL, postcontext]);\n        }\n      }\n      if (!empty) {\n        patches.splice(++x, 0, patch);\n      }\n    }\n  }\n};\n\n\n/**\n * Take a list of patches and return a textual representation.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} Text representation of patches.\n */\ndiff_match_patch.prototype.patch_toText = function(patches) {\n  var text = [];\n  for (var x = 0; x < patches.length; x++) {\n    text[x] = patches[x];\n  }\n  return text.join('');\n};\n\n\n/**\n * Parse a textual representation of patches and return a list of Patch objects.\n * @param {string} textline Text representation of patches.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.patch_fromText = function(textline) {\n  var patches = [];\n  if (!textline) {\n    return patches;\n  }\n  var text = textline.split('\\n');\n  var textPointer = 0;\n  var patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\n  while (textPointer < text.length) {\n    var m = text[textPointer].match(patchHeader);\n    if (!m) {\n      throw new Error('Invalid patch string: ' + text[textPointer]);\n    }\n    var patch = new diff_match_patch.patch_obj();\n    patches.push(patch);\n    patch.start1 = parseInt(m[1], 10);\n    if (m[2] === '') {\n      patch.start1--;\n      patch.length1 = 1;\n    } else if (m[2] == '0') {\n      patch.length1 = 0;\n    } else {\n      patch.start1--;\n      patch.length1 = parseInt(m[2], 10);\n    }\n\n    patch.start2 = parseInt(m[3], 10);\n    if (m[4] === '') {\n      patch.start2--;\n      patch.length2 = 1;\n    } else if (m[4] == '0') {\n      patch.length2 = 0;\n    } else {\n      patch.start2--;\n      patch.length2 = parseInt(m[4], 10);\n    }\n    textPointer++;\n\n    while (textPointer < text.length) {\n      var sign = text[textPointer].charAt(0);\n      try {\n        var line = decodeURI(text[textPointer].substring(1));\n      } catch (ex) {\n        // Malformed URI sequence.\n        throw new Error('Illegal escape in patch_fromText: ' + line);\n      }\n      if (sign == '-') {\n        // Deletion.\n        patch.diffs.push([DIFF_DELETE, line]);\n      } else if (sign == '+') {\n        // Insertion.\n        patch.diffs.push([DIFF_INSERT, line]);\n      } else if (sign == ' ') {\n        // Minor equality.\n        patch.diffs.push([DIFF_EQUAL, line]);\n      } else if (sign == '@') {\n        // Start of next patch.\n        break;\n      } else if (sign === '') {\n        // Blank line?  Whatever.\n      } else {\n        // WTF?\n        throw new Error('Invalid patch mode \"' + sign + '\" in: ' + line);\n      }\n      textPointer++;\n    }\n  }\n  return patches;\n};\n\n\n/**\n * Class representing one patch operation.\n * @constructor\n */\ndiff_match_patch.patch_obj = function() {\n  /** @type {!Array.<!diff_match_patch.Diff>} */\n  this.diffs = [];\n  /** @type {?number} */\n  this.start1 = null;\n  /** @type {?number} */\n  this.start2 = null;\n  /** @type {number} */\n  this.length1 = 0;\n  /** @type {number} */\n  this.length2 = 0;\n};\n\n\n/**\n * Emmulate GNU diff's format.\n * Header: @@ -382,8 +481,9 @@\n * Indicies are printed as 1-based, not 0-based.\n * @return {string} The GNU diff string.\n */\ndiff_match_patch.patch_obj.prototype.toString = function() {\n  var coords1, coords2;\n  if (this.length1 === 0) {\n    coords1 = this.start1 + ',0';\n  } else if (this.length1 == 1) {\n    coords1 = this.start1 + 1;\n  } else {\n    coords1 = (this.start1 + 1) + ',' + this.length1;\n  }\n  if (this.length2 === 0) {\n    coords2 = this.start2 + ',0';\n  } else if (this.length2 == 1) {\n    coords2 = this.start2 + 1;\n  } else {\n    coords2 = (this.start2 + 1) + ',' + this.length2;\n  }\n  var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\\n'];\n  var op;\n  // Escape the body of the patch with %xx notation.\n  for (var x = 0; x < this.diffs.length; x++) {\n    switch (this.diffs[x][0]) {\n      case DIFF_INSERT:\n        op = '+';\n        break;\n      case DIFF_DELETE:\n        op = '-';\n        break;\n      case DIFF_EQUAL:\n        op = ' ';\n        break;\n    }\n    text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\\n';\n  }\n  return text.join('').replace(/%20/g, ' ');\n};\n\n\n// Export these global variables so that they survive Google's JS compiler.\n// In a browser, 'this' will be 'window'.\n// Users of node.js should 'require' the uncompressed version since Google's\n// JS compiler may break the following exports for non-browser environments.\nthis['diff_match_patch'] = diff_match_patch;\nthis['DIFF_DELETE'] = DIFF_DELETE;\nthis['DIFF_INSERT'] = DIFF_INSERT;\nthis['DIFF_EQUAL'] = DIFF_EQUAL;\n","/home/travis/build/npmtest/node-npmtest-article/node_modules/article/tools/analyse/static/script.js":"\n// Find all releveant elements\nvar diffTitle = document.querySelector('#diff-title');\nvar diffImage = document.querySelector('#diff-image');\nvar diffText = document.querySelector('#diff-text');\nvar imageTable = document.querySelector('#image-table');\n\nvar identifier = document.querySelector('#identifier');\nvar statusDiv = document.querySelector('#status');\n\nvar buttonRefresh = document.querySelector('#refresh');\nvar buttonOpen = document.querySelector('#open');\nvar buttonLeft = document.querySelector('#left');\nvar buttonRight = document.querySelector('#right');\n\nvar titleState = document.querySelector('#title-state');\nvar textState = document.querySelector('#text-state');\nvar imageState = document.querySelector('#image-state');\n\n// Create connection\nvar socket = new WebSocket(\"ws://\" + window.location.hostname + ':' + 9100);\n\nsocket.addEventListener(\"message\", function (msg) {\n  msg = JSON.parse(msg.data);\n  \n  HANDLERS[msg.what].call(null, msg.data);\n});\n\nfunction status(boolean, text) {\n  statusDiv.style.borderColor = boolean ? 'tomato' : 'steelblue';\n  statusDiv.innerHTML = text;\n}\n\nfunction send(msg) {\n  socket.send(JSON.stringify(msg));\n}\n\nvar dmp = new diff_match_patch();\n    dmp.Diff_EditCost = 4;\n\nfunction diff(a, b) {\n  return dmp.diff_prettyHtml( dmp.diff_main(a, b) );\n}\n\nvar paused = false;\nfunction pause() {\n  if (paused) return;\n  paused = true;\n\n  titleState.disabled = true;\n  textState.disabled = true;\n  imageState.disabled = true;\n}\n\nfunction resume() {\n  if (!paused) return;\n  paused = false;\n\n  titleState.disabled = false;\n  textState.disabled = false;\n  imageState.disabled = false;\n}\n\nfunction imageDiff(actual, expected) {\n  var fragment = document.createDocumentFragment();\n\n  var imageView = document.createElement('tr');\n      imageView.setAttribute('id', 'image-view');\n  fragment.appendChild(imageView);\n\n  var imageSize = document.createElement('tr');\n      imageSize.setAttribute('id', 'image-size');\n  fragment.appendChild(imageSize);\n\n  function loadImage(src, className, col) {\n    col.size.setAttribute('class', className);\n    col.view.setAttribute('class', className);\n\n    if (src) {\n      var img = new Image();\n          img.src = src;\n\n      var sizeReader = new Image();\n          sizeReader.src = src;\n\n      col.size.innerHTML = 'loading ...';\n      sizeReader.addEventListener('load', function () {\n        col.size.innerHTML = sizeReader.width + ' &times; ' + sizeReader.height;\n      });\n      sizeReader.addEventListener('error', function () {\n        col.size.innerHTML = 'error';\n      });\n\n      col.view.appendChild(img);\n    } else {\n      col.size.innerHTML = 'none';\n    }\n  }\n\n  function createCollumn() {\n    var col = {\n      view: document.createElement('td'),\n      size: document.createElement('td')\n    };\n\n    imageView.appendChild(col.view);\n    imageSize.appendChild(col.size);\n\n    return col;\n  }\n\n  console.log(actual, expected, actual === expected);\n  if (actual === expected) {\n    loadImage(actual, 'img-diff-match', createCollumn());\n  } else {\n    loadImage(actual, 'img-diff-del', createCollumn());\n    loadImage(expected, 'img-diff-ins', createCollumn());    \n  }\n\n  return fragment;\n}\n\nvar TOTAL = 0;\nvar INDEX = 0;\n\nvar HANDLERS = {\n  'ready': function (total) {\n    status(false, 'Comparing ...');\n    TOTAL = total;\n  },\n\n  'compare': function (data) {\n    var item = data.item;\n    var compare = data.compare;\n    status(false, 'Compared result');\n\n    var state = (item.state || '0-0-0').split('-').map(Number);\n    titleState.value = state[0];\n    textState.value = state[1];\n    imageState.value = state[2];\n\n    identifier.innerHTML = item.key;\n    buttonOpen.href = item.href;\n    INDEX = item.index;\n\n    diffTitle.innerHTML = diff(compare.actual.title || '', compare.expected.title || '');\n    diffText.innerHTML = diff(compare.actual.text || '', compare.expected.text || '');\n\n    diffImage.innerHTML = diff(compare.actual.image || '', compare.expected.image || '');\n\n    imageTable.innerHTML = '';\n    imageTable.appendChild(imageDiff(compare.actual.image || null, compare.expected.image || null));\n\n    buttonLeft.style.visibility = (INDEX !== 0) ? 'visible' : 'hidden';\n    buttonRight.style.visibility = (INDEX !== (TOTAL - 1)) ? 'visible' : 'hidden';\n  },\n\n  'error': function (message) {\n    status(true, message);\n  },\n  \n  'resume': function () {\n    status(false, 'Compared result');\n    resume();\n  }\n};\n\ntitleState.addEventListener('change', updateState);\ntextState.addEventListener('change', updateState);\nimageState.addEventListener('change', updateState);\n\nfunction updateState() {\n  if (paused) return;\n  pause();\n\n  status(false, 'Updateing state ...');\n  send({\n    'what': 'state',\n    'data': {\n      'index': INDEX,\n      'state': titleState.value + '-' + textState.value + '-' + imageState.value\n    }\n  });  \n}\n\nbuttonRefresh.addEventListener('click', function () {\n  if (paused) return;\n  pause();\n\n  status(false, 'Comparing ...');\n  send({ 'what': 'load', 'data': INDEX });\n});\n\nbuttonLeft.addEventListener('click', leftClick);\nbuttonRight.addEventListener('click', rightClick);\n\nwindow.addEventListener('keydown', function (evt) {\n  switch (evt.keyCode) {\n    case 37:\n      leftClick();\n      break;\n    case 39:\n      rightClick();\n      break;\n  }\n});\n\nfunction leftClick() {\n  if (INDEX === 0) return;\n  if (paused) return;\n  pause();\n\n  status(false, 'Comparing ...');\n  send({ 'what': 'load', 'data': INDEX - 1 });\n}\n\nfunction rightClick() {\n  if (INDEX === (TOTAL - 1)) return;\n  if (paused) return;\n  pause();\n\n  status(false, 'Comparing ...');\n  send({ 'what': 'load', 'data': INDEX + 1 });\n}\n","/home/travis/build/npmtest/node-npmtest-article/node_modules/article/tools/label/static/script.js":"\n// Find all releveant elements\nvar iframe = document.querySelector('iframe');\n\nvar labelTitle = document.querySelector('#label-title');\nvar labelImage = document.querySelector('#label-image');\nvar labelText = document.querySelector('textarea');\n\nvar statusDiv = document.querySelector('#status');\n\nvar buttonSave = document.querySelector('#save');\nvar buttonSkip = document.querySelector('#skip');\n\n// Create connection\nvar socket = new WebSocket(\"ws://\" + window.location.hostname + ':' + 9000);\n\nsocket.addEventListener(\"message\", function (msg) {\n  msg = JSON.parse(msg.data);\n  \n  HANDLERS[msg.what].call(null, msg.data);\n});\n\nfunction status(boolean, text) {\n  statusDiv.style.borderColor = boolean ? 'tomato' : 'steelblue';\n  statusDiv.innerHTML = text;\n}\n\nfunction send(msg) {\n  socket.send(JSON.stringify(msg));\n}\n\nvar currentItem = null;\nvar canSave = false;\n\nvar HANDLERS = {\n  'done': function (skips) {\n    status(false, 'Done, skiped ' + skips + ' label requests');\n\n    labelTitle.value = '';\n    labelImage.value = '';\n    labelText.value = '';\n    iframe.src = 'about:blank';\n  },\n\n  'error': function (message) {\n    status(true, message);\n  },\n\n  'label-processing': function (item) {\n    status(false, 'Analysing data ... <br> ' + item.href);\n\n    labelTitle.value = '';\n    labelImage.value = '';\n    labelText.value = '';\n\n    currentItem = item;\n    iframe.src = item.href;\n  },\n  \n  'label-analysed': function (analyse) {\n    status(false, 'Please vertify this! <br> ' + currentItem.href);\n\n    labelTitle.value = analyse.title;\n    labelImage.value = analyse.image;\n    labelText.value = analyse.text;\n    \n    canSave = true;\n  },\n  \n  'label-saving': function () {\n    status(false, 'Saving data ...');\n  }\n};\n\nbuttonSave.addEventListener('click', function () {\n  if (canSave === false) return;\n  canSave = false;\n  \n  currentItem.text = labelText.value;\n  currentItem.title = labelTitle.value;\n  currentItem.image = labelImage.value;\n\n  send({ 'what': 'save', 'data': currentItem });\n});\n\nbuttonSkip.addEventListener('click', function () {\n  if (canSave === false) return;\n  canSave = false;\n  \n  send({ 'what': 'skip', 'data': currentItem });\n});\n"}